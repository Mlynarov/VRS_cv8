
VRS_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001640  08001640  00011640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001658  08001658  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001658  08001658  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001658  08001658  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001658  08001658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800165c  0800165c  0001165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000054e9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001111  00000000  00000000  0002551d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  00026630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b0  00000000  00000000  00026b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016620  00000000  00000000  00027028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000487b  00000000  00000000  0003d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077d49  00000000  00000000  00041ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b9c0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001414  00000000  00000000  000b9c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001628 	.word	0x08001628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001628 	.word	0x08001628

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000204:	2102      	movs	r1, #2
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f7ff ffdd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800020e:	2101      	movs	r1, #1
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f7ff ffd8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f7ff ffd2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000224:	2120      	movs	r1, #32
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <resetAllSegments+0x58>)
 8000228:	f7ff ffce 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800022c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000234:	f7ff ffc8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000238:	2108      	movs	r1, #8
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000242:	2110      	movs	r1, #16
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <resetAllSegments+0x58>)
 8000246:	f7ff ffbf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800024a:	2102      	movs	r1, #2
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <resetAllSegments+0x58>)
 800024e:	f7ff ffbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	48000400 	.word	0x48000400

0800025c <resetAllDigits>:

void resetAllDigits(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000260:	2104      	movs	r1, #4
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f7ff ffbd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800026a:	2120      	movs	r1, #32
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f7ff ffb8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000274:	2110      	movs	r1, #16
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f7ff ffb3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 800027e:	2140      	movs	r1, #64	; 0x40
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f7ff ffa9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <setd>:
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
}
void setd(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800029c:	2101      	movs	r1, #1
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f7ff ff9f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f7ff ff99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80002b2:	2120      	movs	r1, #32
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <setd+0x50>)
 80002b6:	f7ff ff95 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f7ff ff8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80002c6:	2110      	movs	r1, #16
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <setd+0x50>)
 80002ca:	f7ff ff8b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80002ce:	2102      	movs	r1, #2
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f7ff ff78 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80002d8:	2108      	movs	r1, #8
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f7ff ff73 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	48000400 	.word	0x48000400

080002ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f6:	695a      	ldr	r2, [r3, #20]
 80002f8:	4907      	ldr	r1, [pc, #28]	; (8000318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4013      	ands	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800030a:	68fb      	ldr	r3, [r7, #12]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000

0800031c <LL_GPIO_ResetOutputPin>:
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800034e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000352:	f7ff ffcb 	bl	80002ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000356:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800035a:	f7ff ffc7 	bl	80002ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800035e:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f7ff ffd9 	bl	800031c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800036a:	2132      	movs	r1, #50	; 0x32
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <MX_GPIO_Init+0x84>)
 800036e:	f7ff ffd5 	bl	800031c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8000372:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8000376:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000378:	2301      	movs	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f000 fc7c 	bl	8000c8c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8000394:	2332      	movs	r3, #50	; 0x32
 8000396:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000398:	2301      	movs	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <MX_GPIO_Init+0x84>)
 80003ae:	f000 fc6d 	bl	8000c8c <LL_GPIO_Init>

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	48000400 	.word	0x48000400

080003c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003f2:	4a04      	ldr	r2, [pc, #16]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	60d3      	str	r3, [r2, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <LL_RCC_HSI_Enable+0x1c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <LL_RCC_HSI_Enable+0x1c>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <LL_RCC_HSI_IsReady+0x20>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f003 0302 	and.w	r3, r3, #2
 8000434:	2b02      	cmp	r3, #2
 8000436:	bf0c      	ite	eq
 8000438:	2301      	moveq	r3, #1
 800043a:	2300      	movne	r3, #0
 800043c:	b2db      	uxtb	r3, r3
}
 800043e:	4618      	mov	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	4904      	ldr	r1, [pc, #16]	; (8000474 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000462:	4313      	orrs	r3, r2
 8000464:	600b      	str	r3, [r1, #0]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <LL_RCC_SetSysClkSource+0x24>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f023 0203 	bic.w	r2, r3, #3
 8000488:	4904      	ldr	r1, [pc, #16]	; (800049c <LL_RCC_SetSysClkSource+0x24>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	604b      	str	r3, [r1, #4]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <LL_RCC_GetSysClkSource+0x18>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 030c 	and.w	r3, r3, #12
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004cc:	4904      	ldr	r1, [pc, #16]	; (80004e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	604b      	str	r3, [r1, #4]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004f4:	4904      	ldr	r1, [pc, #16]	; (8000508 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	604b      	str	r3, [r1, #4]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000

0800050c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800051c:	4904      	ldr	r1, [pc, #16]	; (8000530 <LL_RCC_SetAPB2Prescaler+0x24>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	604b      	str	r3, [r1, #4]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000

08000534 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800053e:	69da      	ldr	r2, [r3, #28]
 8000540:	4907      	ldr	r1, [pc, #28]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4013      	ands	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	4907      	ldr	r1, [pc, #28]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000

08000594 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f023 0207 	bic.w	r2, r3, #7
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	600b      	str	r3, [r1, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40022000 	.word	0x40022000

080005bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_FLASH_GetLatency+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 0307 	and.w	r3, r3, #7
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <LL_GPIO_SetOutputPin>:
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	619a      	str	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff ffb3 	bl	8000564 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000602:	f7ff ff97 	bl	8000534 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000606:	2003      	movs	r0, #3
 8000608:	f7ff feda 	bl	80003c0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f816 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f7ff fe92 	bl	8000338 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000614:	f000 f9af 	bl	8000976 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  resetAllDigits();
 8000618:	f7ff fe20 	bl	800025c <resetAllDigits>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DIGIT_1_ON;
 800061c:	2120      	movs	r1, #32
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f7ff ffd9 	bl	80005d8 <LL_GPIO_SetOutputPin>
	  resetAllSegments();
 8000626:	f7ff fdeb 	bl	8000200 <resetAllSegments>
	  setd();
 800062a:	f7ff fe35 	bl	8000298 <setd>
	  DIGIT_2_ON;
 800062e:	2110      	movs	r1, #16
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f7ff ffd0 	bl	80005d8 <LL_GPIO_SetOutputPin>
	  DIGIT_1_ON;
 8000638:	e7f0      	b.n	800061c <main+0x28>
	...

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffa7 	bl	8000594 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000646:	bf00      	nop
 8000648:	f7ff ffb8 	bl	80005bc <LL_FLASH_GetLatency>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1fa      	bne.n	8000648 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000652:	f7ff fed9 	bl	8000408 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000656:	bf00      	nop
 8000658:	f7ff fee6 	bl	8000428 <LL_RCC_HSI_IsReady>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d1fa      	bne.n	8000658 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000662:	2010      	movs	r0, #16
 8000664:	f7ff fef2 	bl	800044c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ff27 	bl	80004bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff38 	bl	80004e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff49 	bl	800050c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fefc 	bl	8000478 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000680:	bf00      	nop
 8000682:	f7ff ff0d 	bl	80004a0 <LL_RCC_GetSysClkSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1fa      	bne.n	8000682 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <SystemClock_Config+0x60>)
 800068e:	f000 ff81 	bl	8001594 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <SystemClock_Config+0x60>)
 8000694:	f000 ff8c 	bl	80015b0 <LL_SetSystemCoreClock>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	007a1200 	.word	0x007a1200

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SystemInit+0x20>)
 800070a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <SystemInit+0x20>)
 8000710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <LL_APB1_GRP1_EnableClock>:
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000846:	69da      	ldr	r2, [r3, #28]
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <LL_APB1_GRP1_EnableClock+0x2c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4013      	ands	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d028      	beq.n	80008ee <LL_TIM_OC_DisableFast+0x62>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d023      	beq.n	80008ea <LL_TIM_OC_DisableFast+0x5e>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d01e      	beq.n	80008e6 <LL_TIM_OC_DisableFast+0x5a>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b40      	cmp	r3, #64	; 0x40
 80008ac:	d019      	beq.n	80008e2 <LL_TIM_OC_DisableFast+0x56>
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b4:	d013      	beq.n	80008de <LL_TIM_OC_DisableFast+0x52>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008bc:	d00d      	beq.n	80008da <LL_TIM_OC_DisableFast+0x4e>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008c4:	d007      	beq.n	80008d6 <LL_TIM_OC_DisableFast+0x4a>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008cc:	d101      	bne.n	80008d2 <LL_TIM_OC_DisableFast+0x46>
 80008ce:	2307      	movs	r3, #7
 80008d0:	e00e      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008d2:	2308      	movs	r3, #8
 80008d4:	e00c      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008d6:	2306      	movs	r3, #6
 80008d8:	e00a      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008da:	2305      	movs	r3, #5
 80008dc:	e008      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008de:	2304      	movs	r3, #4
 80008e0:	e006      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008e2:	2303      	movs	r3, #3
 80008e4:	e004      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e002      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <LL_TIM_OC_DisableFast+0x64>
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3318      	adds	r3, #24
 80008f6:	4619      	mov	r1, r3
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <LL_TIM_OC_DisableFast+0x9c>)
 80008fc:	5cd3      	ldrb	r3, [r2, r3]
 80008fe:	440b      	add	r3, r1
 8000900:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <LL_TIM_OC_DisableFast+0xa0>)
 800090a:	5ccb      	ldrb	r3, [r1, r3]
 800090c:	4619      	mov	r1, r3
 800090e:	2304      	movs	r3, #4
 8000910:	408b      	lsls	r3, r1
 8000912:	43db      	mvns	r3, r3
 8000914:	401a      	ands	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	601a      	str	r2, [r3, #0]

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	08001640 	.word	0x08001640
 800092c:	0800164c 	.word	0x0800164c

08000930 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	609a      	str	r2, [r3, #8]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b08e      	sub	sp, #56	; 0x38
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2220      	movs	r2, #32
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fe40 	bl	8001618 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff4f 	bl	800083c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800099e:	f7ff fec3 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff13 	bl	80007d4 <NVIC_EncodePriority>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4619      	mov	r1, r3
 80009b2:	201c      	movs	r0, #28
 80009b4:	f7ff fee4 	bl	8000780 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80009b8:	201c      	movs	r0, #28
 80009ba:	f7ff fec3 	bl	8000744 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80009be:	f240 331f 	movw	r3, #799	; 0x31f
 80009c2:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 80009c8:	f241 3387 	movw	r3, #4999	; 0x1387
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009dc:	f000 fa56 	bl	8000e8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80009e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009e4:	f7ff ff42 	bl	800086c <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	461a      	mov	r2, r3
 8000a00:	2101      	movs	r1, #1
 8000a02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a06:	f000 fab3 	bl	8000f70 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a10:	f7ff ff3c 	bl	800088c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000a14:	2100      	movs	r1, #0
 8000a16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a1a:	f7ff ff89 	bl	8000930 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000a1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a22:	f7ff ff98 	bl	8000956 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3738      	adds	r7, #56	; 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff fe53 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f000 fdb7 	bl	80015d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fdc7 	bl	80005f4 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a68:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a74:	08001660 	.word	0x08001660
  ldr r2, =_sbss
 8000a78:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a7c:	20000020 	.word	0x20000020

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>

08000a82 <LL_GPIO_SetPinMode>:
{
 8000a82:	b480      	push	{r7}
 8000a84:	b089      	sub	sp, #36	; 0x24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fab3 f383 	clz	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	61bb      	str	r3, [r7, #24]
  return result;
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	fab3 f383 	clz	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_GPIO_SetPinOutputType>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	401a      	ands	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	fb01 f303 	mul.w	r3, r1, r3
 8000afe:	431a      	orrs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	605a      	str	r2, [r3, #4]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_GPIO_SetPinSpeed>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	613b      	str	r3, [r7, #16]
  return result;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2103      	movs	r1, #3
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	401a      	ands	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	61bb      	str	r3, [r7, #24]
  return result;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	609a      	str	r2, [r3, #8]
}
 8000b62:	bf00      	nop
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <LL_GPIO_SetPinPull>:
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b089      	sub	sp, #36	; 0x24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa93 f3a3 	rbit	r3, r3
 8000b88:	613b      	str	r3, [r7, #16]
  return result;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2103      	movs	r1, #3
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa93 f3a3 	rbit	r3, r3
 8000ba8:	61bb      	str	r3, [r7, #24]
  return result;
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	fab3 f383 	clz	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3724      	adds	r7, #36	; 0x24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_GPIO_SetAFPin_0_7>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	613b      	str	r3, [r7, #16]
  return result;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	fab3 f383 	clz	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	fa93 f3a3 	rbit	r3, r3
 8000c06:	61bb      	str	r3, [r7, #24]
  return result;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	621a      	str	r2, [r3, #32]
}
 8000c1e:	bf00      	nop
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_GPIO_SetAFPin_8_15>:
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b089      	sub	sp, #36	; 0x24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	613b      	str	r3, [r7, #16]
  return result;
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	210f      	movs	r1, #15
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa93 f3a3 	rbit	r3, r3
 8000c68:	61bb      	str	r3, [r7, #24]
  return result;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	fab3 f383 	clz	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	613b      	str	r3, [r7, #16]
  return result;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	fab3 f383 	clz	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000cae:	e051      	b.n	8000d54 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d043      	beq.n	8000d4e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d003      	beq.n	8000cd6 <LL_GPIO_Init+0x4a>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d10e      	bne.n	8000cf4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	69b9      	ldr	r1, [r7, #24]
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff16 	bl	8000b10 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	461a      	mov	r2, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fef6 	bl	8000ae0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff36 	bl	8000b6e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d11a      	bne.n	8000d40 <LL_GPIO_Init+0xb4>
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	60bb      	str	r3, [r7, #8]
  return result;
 8000d16:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	d807      	bhi.n	8000d32 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	461a      	mov	r2, r3
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff4e 	bl	8000bcc <LL_GPIO_SetAFPin_0_7>
 8000d30:	e006      	b.n	8000d40 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	461a      	mov	r2, r3
 8000d38:	69b9      	ldr	r1, [r7, #24]
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff75 	bl	8000c2a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	461a      	mov	r2, r3
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fe9a 	bl	8000a82 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1a6      	bne.n	8000cb0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <LL_TIM_SetPrescaler>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_TIM_SetAutoReload>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_TIM_SetRepetitionCounter>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_TIM_OC_SetCompareCH1>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_TIM_OC_SetCompareCH2>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_TIM_OC_SetCompareCH3>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_TIM_OC_SetCompareCH4>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_TIM_OC_SetCompareCH5>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_TIM_OC_SetCompareCH6>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	615a      	str	r2, [r3, #20]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <LL_TIM_Init+0xd0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <LL_TIM_Init+0x28>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eaa:	d003      	beq.n	8000eb4 <LL_TIM_Init+0x28>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <LL_TIM_Init+0xd4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d106      	bne.n	8000ec2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <LL_TIM_Init+0xd0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <LL_TIM_Init+0x66>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d00f      	beq.n	8000ef2 <LL_TIM_Init+0x66>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <LL_TIM_Init+0xd4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00b      	beq.n	8000ef2 <LL_TIM_Init+0x66>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <LL_TIM_Init+0xd8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <LL_TIM_Init+0x66>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <LL_TIM_Init+0xdc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <LL_TIM_Init+0x66>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <LL_TIM_Init+0xe0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d106      	bne.n	8000f00 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff3b 	bl	8000d88 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff27 	bl	8000d6c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LL_TIM_Init+0xd0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00b      	beq.n	8000f3e <LL_TIM_Init+0xb2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LL_TIM_Init+0xd8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <LL_TIM_Init+0xb2>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LL_TIM_Init+0xdc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d003      	beq.n	8000f3e <LL_TIM_Init+0xb2>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <LL_TIM_Init+0xe0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d105      	bne.n	8000f4a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	4619      	mov	r1, r3
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff2d 	bl	8000da4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff8e 	bl	8000e6c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40014000 	.word	0x40014000
 8000f68:	40014400 	.word	0x40014400
 8000f6c:	40014800 	.word	0x40014800

08000f70 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f86:	d045      	beq.n	8001014 <LL_TIM_OC_Init+0xa4>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f8e:	d848      	bhi.n	8001022 <LL_TIM_OC_Init+0xb2>
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d036      	beq.n	8001006 <LL_TIM_OC_Init+0x96>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9e:	d840      	bhi.n	8001022 <LL_TIM_OC_Init+0xb2>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fa6:	d027      	beq.n	8000ff8 <LL_TIM_OC_Init+0x88>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fae:	d838      	bhi.n	8001022 <LL_TIM_OC_Init+0xb2>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb6:	d018      	beq.n	8000fea <LL_TIM_OC_Init+0x7a>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fbe:	d830      	bhi.n	8001022 <LL_TIM_OC_Init+0xb2>
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d003      	beq.n	8000fce <LL_TIM_OC_Init+0x5e>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d007      	beq.n	8000fdc <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000fcc:	e029      	b.n	8001022 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f82d 	bl	8001030 <OC1Config>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8000fda:	e023      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f8a0 	bl	8001124 <OC2Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8000fe8:	e01c      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 f917 	bl	8001220 <OC3Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff6:	e015      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f98e 	bl	800131c <OC4Config>
 8001000:	4603      	mov	r3, r0
 8001002:	75fb      	strb	r3, [r7, #23]
      break;
 8001004:	e00e      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f9ed 	bl	80013e8 <OC5Config>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
      break;
 8001012:	e007      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 fa44 	bl	80014a4 <OC6Config>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
      break;
 8001020:	e000      	b.n	8001024 <LL_TIM_OC_Init+0xb4>
      break;
 8001022:	bf00      	nop
  }

  return result;
 8001024:	7dfb      	ldrb	r3, [r7, #23]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	f023 0201 	bic.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f023 0202 	bic.w	r2, r3, #2
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f023 0201 	bic.w	r2, r3, #1
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <OC1Config+0xe4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00b      	beq.n	80010ae <OC1Config+0x7e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <OC1Config+0xe8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <OC1Config+0x7e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <OC1Config+0xec>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d003      	beq.n	80010ae <OC1Config+0x7e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <OC1Config+0xf0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11e      	bne.n	80010ec <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f023 0208 	bic.w	r2, r3, #8
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f023 0204 	bic.w	r2, r3, #4
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4313      	orrs	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fe5e 	bl	8000dc0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40014000 	.word	0x40014000
 800111c:	40014400 	.word	0x40014400
 8001120:	40014800 	.word	0x40014800

08001124 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	f023 0210 	bic.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800115a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	0212      	lsls	r2, r2, #8
 8001164:	4313      	orrs	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f023 0220 	bic.w	r2, r3, #32
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4313      	orrs	r3, r2
 8001176:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f023 0210 	bic.w	r2, r3, #16
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <OC2Config+0xec>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00b      	beq.n	80011a8 <OC2Config+0x84>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <OC2Config+0xf0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d007      	beq.n	80011a8 <OC2Config+0x84>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <OC2Config+0xf4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d003      	beq.n	80011a8 <OC2Config+0x84>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <OC2Config+0xf8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11f      	bne.n	80011e8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	019b      	lsls	r3, r3, #6
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	019b      	lsls	r3, r3, #6
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fdee 	bl	8000ddc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40014000 	.word	0x40014000
 8001218:	40014400 	.word	0x40014400
 800121c:	40014800 	.word	0x40014800

08001220 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4313      	orrs	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	4313      	orrs	r3, r2
 8001280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <OC3Config+0xec>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00b      	beq.n	80012a2 <OC3Config+0x82>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <OC3Config+0xf0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <OC3Config+0x82>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <OC3Config+0xf4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d003      	beq.n	80012a2 <OC3Config+0x82>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <OC3Config+0xf8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11f      	bne.n	80012e2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	029b      	lsls	r3, r3, #10
 80012ae:	4313      	orrs	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	015b      	lsls	r3, r3, #5
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fd7f 	bl	8000df8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40014000 	.word	0x40014000
 8001314:	40014400 	.word	0x40014400
 8001318:	40014800 	.word	0x40014800

0800131c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	0212      	lsls	r2, r2, #8
 800135c:	4313      	orrs	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	031b      	lsls	r3, r3, #12
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	031b      	lsls	r3, r3, #12
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <OC4Config+0xbc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00b      	beq.n	80013a0 <OC4Config+0x84>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <OC4Config+0xc0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <OC4Config+0x84>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <OC4Config+0xc4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d003      	beq.n	80013a0 <OC4Config+0x84>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <OC4Config+0xc8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d107      	bne.n	80013b0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	019b      	lsls	r3, r3, #6
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fd26 	bl	8000e14 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40014000 	.word	0x40014000
 80013e0:	40014400 	.word	0x40014400
 80013e4:	40014800 	.word	0x40014800

080013e8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	4313      	orrs	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <OC5Config+0xac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00b      	beq.n	800145c <OC5Config+0x74>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <OC5Config+0xb0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <OC5Config+0x74>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <OC5Config+0xb4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d003      	beq.n	800145c <OC5Config+0x74>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <OC5Config+0xb8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d109      	bne.n	8001470 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fcd7 	bl	8000e30 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40014000 	.word	0x40014000
 800149c:	40014400 	.word	0x40014400
 80014a0:	40014800 	.word	0x40014800

080014a4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	0212      	lsls	r2, r2, #8
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	051b      	lsls	r3, r3, #20
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	051b      	lsls	r3, r3, #20
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <OC6Config+0xac>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00b      	beq.n	800151a <OC6Config+0x76>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <OC6Config+0xb0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <OC6Config+0x76>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <OC6Config+0xb4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d003      	beq.n	800151a <OC6Config+0x76>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <OC6Config+0xb8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d109      	bne.n	800152e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fc88 	bl	8000e50 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40014000 	.word	0x40014000
 8001558:	40014400 	.word	0x40014400
 800155c:	40014800 	.word	0x40014800

08001560 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <LL_InitTick+0x30>)
 8001574:	3b01      	subs	r3, #1
 8001576:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <LL_InitTick+0x30>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <LL_InitTick+0x30>)
 8001580:	2205      	movs	r2, #5
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e010 	.word	0xe000e010

08001594 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800159c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffdd 	bl	8001560 <LL_InitTick>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <LL_SetSystemCoreClock+0x1c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000

080015d0 <__libc_init_array>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4d0d      	ldr	r5, [pc, #52]	; (8001608 <__libc_init_array+0x38>)
 80015d4:	4c0d      	ldr	r4, [pc, #52]	; (800160c <__libc_init_array+0x3c>)
 80015d6:	1b64      	subs	r4, r4, r5
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	2600      	movs	r6, #0
 80015dc:	42a6      	cmp	r6, r4
 80015de:	d109      	bne.n	80015f4 <__libc_init_array+0x24>
 80015e0:	4d0b      	ldr	r5, [pc, #44]	; (8001610 <__libc_init_array+0x40>)
 80015e2:	4c0c      	ldr	r4, [pc, #48]	; (8001614 <__libc_init_array+0x44>)
 80015e4:	f000 f820 	bl	8001628 <_init>
 80015e8:	1b64      	subs	r4, r4, r5
 80015ea:	10a4      	asrs	r4, r4, #2
 80015ec:	2600      	movs	r6, #0
 80015ee:	42a6      	cmp	r6, r4
 80015f0:	d105      	bne.n	80015fe <__libc_init_array+0x2e>
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f8:	4798      	blx	r3
 80015fa:	3601      	adds	r6, #1
 80015fc:	e7ee      	b.n	80015dc <__libc_init_array+0xc>
 80015fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001602:	4798      	blx	r3
 8001604:	3601      	adds	r6, #1
 8001606:	e7f2      	b.n	80015ee <__libc_init_array+0x1e>
 8001608:	08001658 	.word	0x08001658
 800160c:	08001658 	.word	0x08001658
 8001610:	08001658 	.word	0x08001658
 8001614:	0800165c 	.word	0x0800165c

08001618 <memset>:
 8001618:	4402      	add	r2, r0
 800161a:	4603      	mov	r3, r0
 800161c:	4293      	cmp	r3, r2
 800161e:	d100      	bne.n	8001622 <memset+0xa>
 8001620:	4770      	bx	lr
 8001622:	f803 1b01 	strb.w	r1, [r3], #1
 8001626:	e7f9      	b.n	800161c <memset+0x4>

08001628 <_init>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	bf00      	nop
 800162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162e:	bc08      	pop	{r3}
 8001630:	469e      	mov	lr, r3
 8001632:	4770      	bx	lr

08001634 <_fini>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	bf00      	nop
 8001638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163a:	bc08      	pop	{r3}
 800163c:	469e      	mov	lr, r3
 800163e:	4770      	bx	lr
