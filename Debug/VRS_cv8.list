
VRS_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800293c  0800293c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800293c  0800293c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800293c  0800293c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000020  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005aeb  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001236  00000000  00000000  00025b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  00026d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  000273d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016620  00000000  00000000  000279a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004e74  00000000  00000000  0003dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077eeb  00000000  00000000  00042e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bad27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001858  00000000  00000000  000bad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f8 	.word	0x080028f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080028f8 	.word	0x080028f8

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <updateDisplay>:
#include "display.h"
uint8_t updateDigit = 1;
uint8_t displayTextPos = 0;
uint8_t direction = 0;

void updateDisplay(){
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	char displayString[] = "MICHAL MOLnAr 98352";
 8000206:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <updateDisplay+0xf0>)
 8000208:	1d3c      	adds	r4, r7, #4
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	682b      	ldr	r3, [r5, #0]
 8000212:	6023      	str	r3, [r4, #0]
	resetAllDigits();
 8000214:	f000 fa2a 	bl	800066c <resetAllDigits>
	switch(updateDigit){
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <updateDisplay+0xf4>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	2b03      	cmp	r3, #3
 8000220:	d855      	bhi.n	80002ce <updateDisplay+0xce>
 8000222:	a201      	add	r2, pc, #4	; (adr r2, 8000228 <updateDisplay+0x28>)
 8000224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000228:	08000239 	.word	0x08000239
 800022c:	0800025d 	.word	0x0800025d
 8000230:	08000283 	.word	0x08000283
 8000234:	080002a9 	.word	0x080002a9
		case 1:
			DIGIT_1_ON;
 8000238:	2120      	movs	r1, #32
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
			resetAllSegments();
 8000242:	f000 f9e5 	bl	8000610 <resetAllSegments>
			displayLetter(displayString[displayTextPos]);
 8000246:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <updateDisplay+0xf8>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f107 0218 	add.w	r2, r7, #24
 800024e:	4413      	add	r3, r2
 8000250:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f893 	bl	8000380 <displayLetter>
			break;
 800025a:	e038      	b.n	80002ce <updateDisplay+0xce>
		case 2:
			DIGIT_2_ON;
 800025c:	2110      	movs	r1, #16
 800025e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000262:	f7ff ffb1 	bl	80001c8 <LL_GPIO_SetOutputPin>
			resetAllSegments();
 8000266:	f000 f9d3 	bl	8000610 <resetAllSegments>
			displayLetter(displayString[displayTextPos+1]);
 800026a:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <updateDisplay+0xf8>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	f107 0218 	add.w	r2, r7, #24
 8000274:	4413      	add	r3, r2
 8000276:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f880 	bl	8000380 <displayLetter>
			break;
 8000280:	e025      	b.n	80002ce <updateDisplay+0xce>
		case 3:
			DIGIT_3_ON;
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f7ff ff9e 	bl	80001c8 <LL_GPIO_SetOutputPin>
			resetAllSegments();
 800028c:	f000 f9c0 	bl	8000610 <resetAllSegments>
			displayLetter(displayString[displayTextPos+2]);
 8000290:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <updateDisplay+0xf8>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3302      	adds	r3, #2
 8000296:	f107 0218 	add.w	r2, r7, #24
 800029a:	4413      	add	r3, r2
 800029c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f86d 	bl	8000380 <displayLetter>
			break;
 80002a6:	e012      	b.n	80002ce <updateDisplay+0xce>
		case 4:
			DIGIT_4_ON;
 80002a8:	2104      	movs	r1, #4
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f7ff ff8b 	bl	80001c8 <LL_GPIO_SetOutputPin>
			resetAllSegments();
 80002b2:	f000 f9ad 	bl	8000610 <resetAllSegments>
			displayLetter(displayString[displayTextPos+3]);
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <updateDisplay+0xf8>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3303      	adds	r3, #3
 80002bc:	f107 0218 	add.w	r2, r7, #24
 80002c0:	4413      	add	r3, r2
 80002c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f85a 	bl	8000380 <displayLetter>
			break;
 80002cc:	bf00      	nop
	}
	updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <updateDisplay+0xf4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d804      	bhi.n	80002e0 <updateDisplay+0xe0>
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <updateDisplay+0xf4>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	e000      	b.n	80002e2 <updateDisplay+0xe2>
 80002e0:	2301      	movs	r3, #1
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <updateDisplay+0xf4>)
 80002e4:	7013      	strb	r3, [r2, #0]

}
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bdb0      	pop	{r4, r5, r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08002910 	.word	0x08002910
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000024 	.word	0x20000024

080002fc <shiftDisplayText>:

void shiftDisplayText(){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	if(displayTextPos < (20-4-1) && direction == 0){
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <shiftDisplayText+0x7c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b0e      	cmp	r3, #14
 8000306:	d80a      	bhi.n	800031e <shiftDisplayText+0x22>
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <shiftDisplayText+0x80>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d106      	bne.n	800031e <shiftDisplayText+0x22>
		displayTextPos = displayTextPos+1;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <shiftDisplayText+0x7c>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <shiftDisplayText+0x7c>)
 800031a:	701a      	strb	r2, [r3, #0]
 800031c:	e026      	b.n	800036c <shiftDisplayText+0x70>
	}
	else if(displayTextPos >= (20-4-1) && direction == 0){
 800031e:	4b16      	ldr	r3, [pc, #88]	; (8000378 <shiftDisplayText+0x7c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b0e      	cmp	r3, #14
 8000324:	d907      	bls.n	8000336 <shiftDisplayText+0x3a>
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <shiftDisplayText+0x80>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d103      	bne.n	8000336 <shiftDisplayText+0x3a>
		direction = 1;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <shiftDisplayText+0x80>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	e01a      	b.n	800036c <shiftDisplayText+0x70>
	}
	else if(displayTextPos <= 0 && direction == 1){
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <shiftDisplayText+0x7c>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d107      	bne.n	800034e <shiftDisplayText+0x52>
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <shiftDisplayText+0x80>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d103      	bne.n	800034e <shiftDisplayText+0x52>
		direction = 0;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <shiftDisplayText+0x80>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e00e      	b.n	800036c <shiftDisplayText+0x70>
	}
	else if(displayTextPos > 0 && direction == 1){
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <shiftDisplayText+0x7c>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00a      	beq.n	800036c <shiftDisplayText+0x70>
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <shiftDisplayText+0x80>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d106      	bne.n	800036c <shiftDisplayText+0x70>
		displayTextPos = displayTextPos-1;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <shiftDisplayText+0x7c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	3b01      	subs	r3, #1
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <shiftDisplayText+0x7c>)
 8000368:	701a      	strb	r2, [r3, #0]
	}
}
 800036a:	e7ff      	b.n	800036c <shiftDisplayText+0x70>
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000024 	.word	0x20000024
 800037c:	20000025 	.word	0x20000025

08000380 <displayLetter>:

void displayLetter(char letter){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	3b20      	subs	r3, #32
 800038e:	2b59      	cmp	r3, #89	; 0x59
 8000390:	f200 8136 	bhi.w	8000600 <displayLetter+0x280>
 8000394:	a201      	add	r2, pc, #4	; (adr r2, 800039c <displayLetter+0x1c>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	080005bf 	.word	0x080005bf
 80003a0:	08000601 	.word	0x08000601
 80003a4:	08000601 	.word	0x08000601
 80003a8:	08000601 	.word	0x08000601
 80003ac:	08000601 	.word	0x08000601
 80003b0:	08000601 	.word	0x08000601
 80003b4:	08000601 	.word	0x08000601
 80003b8:	08000601 	.word	0x08000601
 80003bc:	08000601 	.word	0x08000601
 80003c0:	08000601 	.word	0x08000601
 80003c4:	08000601 	.word	0x08000601
 80003c8:	08000601 	.word	0x08000601
 80003cc:	08000601 	.word	0x08000601
 80003d0:	08000601 	.word	0x08000601
 80003d4:	08000601 	.word	0x08000601
 80003d8:	08000601 	.word	0x08000601
 80003dc:	080005fb 	.word	0x080005fb
 80003e0:	080005c5 	.word	0x080005c5
 80003e4:	080005cb 	.word	0x080005cb
 80003e8:	080005d1 	.word	0x080005d1
 80003ec:	080005d7 	.word	0x080005d7
 80003f0:	080005dd 	.word	0x080005dd
 80003f4:	080005e3 	.word	0x080005e3
 80003f8:	080005e9 	.word	0x080005e9
 80003fc:	080005ef 	.word	0x080005ef
 8000400:	080005f5 	.word	0x080005f5
 8000404:	08000601 	.word	0x08000601
 8000408:	08000601 	.word	0x08000601
 800040c:	08000601 	.word	0x08000601
 8000410:	08000601 	.word	0x08000601
 8000414:	08000601 	.word	0x08000601
 8000418:	08000601 	.word	0x08000601
 800041c:	08000601 	.word	0x08000601
 8000420:	08000505 	.word	0x08000505
 8000424:	08000601 	.word	0x08000601
 8000428:	08000517 	.word	0x08000517
 800042c:	08000601 	.word	0x08000601
 8000430:	08000529 	.word	0x08000529
 8000434:	0800052f 	.word	0x0800052f
 8000438:	08000535 	.word	0x08000535
 800043c:	0800053b 	.word	0x0800053b
 8000440:	08000547 	.word	0x08000547
 8000444:	0800054d 	.word	0x0800054d
 8000448:	08000553 	.word	0x08000553
 800044c:	08000559 	.word	0x08000559
 8000450:	0800055f 	.word	0x0800055f
 8000454:	08000601 	.word	0x08000601
 8000458:	0800056b 	.word	0x0800056b
 800045c:	08000577 	.word	0x08000577
 8000460:	08000601 	.word	0x08000601
 8000464:	08000601 	.word	0x08000601
 8000468:	08000589 	.word	0x08000589
 800046c:	08000601 	.word	0x08000601
 8000470:	08000595 	.word	0x08000595
 8000474:	080005a1 	.word	0x080005a1
 8000478:	080005a7 	.word	0x080005a7
 800047c:	080005ad 	.word	0x080005ad
 8000480:	08000601 	.word	0x08000601
 8000484:	080005b9 	.word	0x080005b9
 8000488:	08000601 	.word	0x08000601
 800048c:	08000601 	.word	0x08000601
 8000490:	08000601 	.word	0x08000601
 8000494:	08000601 	.word	0x08000601
 8000498:	08000601 	.word	0x08000601
 800049c:	08000601 	.word	0x08000601
 80004a0:	0800050b 	.word	0x0800050b
 80004a4:	08000511 	.word	0x08000511
 80004a8:	0800051d 	.word	0x0800051d
 80004ac:	08000523 	.word	0x08000523
 80004b0:	08000601 	.word	0x08000601
 80004b4:	08000601 	.word	0x08000601
 80004b8:	08000601 	.word	0x08000601
 80004bc:	08000541 	.word	0x08000541
 80004c0:	08000601 	.word	0x08000601
 80004c4:	08000601 	.word	0x08000601
 80004c8:	08000601 	.word	0x08000601
 80004cc:	08000601 	.word	0x08000601
 80004d0:	08000601 	.word	0x08000601
 80004d4:	08000565 	.word	0x08000565
 80004d8:	08000571 	.word	0x08000571
 80004dc:	08000601 	.word	0x08000601
 80004e0:	0800057d 	.word	0x0800057d
 80004e4:	08000583 	.word	0x08000583
 80004e8:	08000601 	.word	0x08000601
 80004ec:	0800058f 	.word	0x0800058f
 80004f0:	0800059b 	.word	0x0800059b
 80004f4:	08000601 	.word	0x08000601
 80004f8:	08000601 	.word	0x08000601
 80004fc:	08000601 	.word	0x08000601
 8000500:	080005b3 	.word	0x080005b3
		case 'A':
			setA();
 8000504:	f000 f8d0 	bl	80006a8 <setA>
			break;
 8000508:	e07d      	b.n	8000606 <displayLetter+0x286>
		case 'a':
			seta();
 800050a:	f000 f8f7 	bl	80006fc <seta>
			break;
 800050e:	e07a      	b.n	8000606 <displayLetter+0x286>
		case 'b':
			setb();
 8000510:	f000 f91e 	bl	8000750 <setb>
			break;
 8000514:	e077      	b.n	8000606 <displayLetter+0x286>
		case 'C':
			setC();
 8000516:	f000 f945 	bl	80007a4 <setC>
			break;
 800051a:	e074      	b.n	8000606 <displayLetter+0x286>
		case 'c':
			setc();
 800051c:	f000 f96c 	bl	80007f8 <setc>
			break;
 8000520:	e071      	b.n	8000606 <displayLetter+0x286>
		case 'd':
			setd();
 8000522:	f000 f993 	bl	800084c <setd>
			break;
 8000526:	e06e      	b.n	8000606 <displayLetter+0x286>
		case 'E':
			setE();
 8000528:	f000 f9ba 	bl	80008a0 <setE>
			break;
 800052c:	e06b      	b.n	8000606 <displayLetter+0x286>
		case 'F':
			setF();
 800052e:	f000 f9e1 	bl	80008f4 <setF>
			break;
 8000532:	e068      	b.n	8000606 <displayLetter+0x286>
		case 'G':
			setG();
 8000534:	f000 fa08 	bl	8000948 <setG>
			break;
 8000538:	e065      	b.n	8000606 <displayLetter+0x286>
		case 'H':
			setH();
 800053a:	f000 fa2f 	bl	800099c <setH>
			break;
 800053e:	e062      	b.n	8000606 <displayLetter+0x286>
		case 'h':
			seth();
 8000540:	f000 fa56 	bl	80009f0 <seth>
			break;
 8000544:	e05f      	b.n	8000606 <displayLetter+0x286>
		case 'I':
			setI();
 8000546:	f000 fa7d 	bl	8000a44 <setI>
			break;
 800054a:	e05c      	b.n	8000606 <displayLetter+0x286>
		case 'J':
			setJ();
 800054c:	f000 faa4 	bl	8000a98 <setJ>
			break;
 8000550:	e059      	b.n	8000606 <displayLetter+0x286>
		case 'K':
			setK();
 8000552:	f000 fcc3 	bl	8000edc <setK>
			break;
 8000556:	e056      	b.n	8000606 <displayLetter+0x286>
		case 'L':
			setL();
 8000558:	f000 fac8 	bl	8000aec <setL>
			break;
 800055c:	e053      	b.n	8000606 <displayLetter+0x286>
		case 'M':
			setM();
 800055e:	f000 fce7 	bl	8000f30 <setM>
			break;
 8000562:	e050      	b.n	8000606 <displayLetter+0x286>
		case 'n':
			setn();
 8000564:	f000 faec 	bl	8000b40 <setn>
			break;
 8000568:	e04d      	b.n	8000606 <displayLetter+0x286>
		case 'O':
			setO();
 800056a:	f000 fb13 	bl	8000b94 <setO>
			break;
 800056e:	e04a      	b.n	8000606 <displayLetter+0x286>
		case 'o':
			seto();
 8000570:	f000 fb3a 	bl	8000be8 <seto>
			break;
 8000574:	e047      	b.n	8000606 <displayLetter+0x286>
		case 'P':
			setP();
 8000576:	f000 fb61 	bl	8000c3c <setP>
			break;
 800057a:	e044      	b.n	8000606 <displayLetter+0x286>
		case 'q':
			setq();
 800057c:	f000 fb88 	bl	8000c90 <setq>
			break;
 8000580:	e041      	b.n	8000606 <displayLetter+0x286>
		case 'r':
			setr();
 8000582:	f000 fbaf 	bl	8000ce4 <setr>
			break;
 8000586:	e03e      	b.n	8000606 <displayLetter+0x286>
		case 'S':
			setS();
 8000588:	f000 fbd6 	bl	8000d38 <setS>
			break;
 800058c:	e03b      	b.n	8000606 <displayLetter+0x286>
		case 't':
			sett();
 800058e:	f000 fbfd 	bl	8000d8c <sett>
			break;
 8000592:	e038      	b.n	8000606 <displayLetter+0x286>
		case 'U':
			setU();
 8000594:	f000 fc24 	bl	8000de0 <setU>
			break;
 8000598:	e035      	b.n	8000606 <displayLetter+0x286>
		case 'u':
			setu();
 800059a:	f000 fc4b 	bl	8000e34 <setu>
			break;
 800059e:	e032      	b.n	8000606 <displayLetter+0x286>
		case 'V':
			setV();
 80005a0:	f000 fcec 	bl	8000f7c <setV>
			break;
 80005a4:	e02f      	b.n	8000606 <displayLetter+0x286>
		case 'W':
			setW();
 80005a6:	f000 fd13 	bl	8000fd0 <setW>
			break;
 80005aa:	e02c      	b.n	8000606 <displayLetter+0x286>
		case 'X':
			setX();
 80005ac:	f000 fd3a 	bl	8001024 <setX>
			break;
 80005b0:	e029      	b.n	8000606 <displayLetter+0x286>
		case 'y':
			sety();
 80005b2:	f000 fc69 	bl	8000e88 <sety>
			break;
 80005b6:	e026      	b.n	8000606 <displayLetter+0x286>
		case 'Z':
			setZ();
 80005b8:	f000 fd5e 	bl	8001078 <setZ>
			break;
 80005bc:	e023      	b.n	8000606 <displayLetter+0x286>
		case ' ':
			resetAllSegments();
 80005be:	f000 f827 	bl	8000610 <resetAllSegments>
			break;
 80005c2:	e020      	b.n	8000606 <displayLetter+0x286>


		case '1':
			setOne();
 80005c4:	f000 fd82 	bl	80010cc <setOne>
			break;
 80005c8:	e01d      	b.n	8000606 <displayLetter+0x286>
		case '2':
			setTwo();
 80005ca:	f000 fda9 	bl	8001120 <setTwo>
			break;
 80005ce:	e01a      	b.n	8000606 <displayLetter+0x286>
		case '3':
			setThree();
 80005d0:	f000 fdd0 	bl	8001174 <setThree>
			break;
 80005d4:	e017      	b.n	8000606 <displayLetter+0x286>
		case '4':
			setFour();
 80005d6:	f000 fdf7 	bl	80011c8 <setFour>
			break;
 80005da:	e014      	b.n	8000606 <displayLetter+0x286>
		case '5':
			setFive();
 80005dc:	f000 fe1e 	bl	800121c <setFive>
			break;
 80005e0:	e011      	b.n	8000606 <displayLetter+0x286>
		case '6':
			setSix();
 80005e2:	f000 fe45 	bl	8001270 <setSix>
			break;
 80005e6:	e00e      	b.n	8000606 <displayLetter+0x286>
		case '7':
			setSeven();
 80005e8:	f000 fe6c 	bl	80012c4 <setSeven>
			break;
 80005ec:	e00b      	b.n	8000606 <displayLetter+0x286>
		case '8':
			setEight();
 80005ee:	f000 fe93 	bl	8001318 <setEight>
			break;
 80005f2:	e008      	b.n	8000606 <displayLetter+0x286>
		case '9':
			setNine();
 80005f4:	f000 feba 	bl	800136c <setNine>
			break;
 80005f8:	e005      	b.n	8000606 <displayLetter+0x286>
		case '0':
			setZero();
 80005fa:	f000 fee1 	bl	80013c0 <setZero>
			break;
 80005fe:	e002      	b.n	8000606 <displayLetter+0x286>

		default:
			setDot();
 8000600:	f000 ff08 	bl	8001414 <setDot>
			break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop

08000610 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000614:	2102      	movs	r1, #2
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f7ff fdd5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800061e:	2101      	movs	r1, #1
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f7ff fdd0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f7ff fdca 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000634:	2120      	movs	r1, #32
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <resetAllSegments+0x58>)
 8000638:	f7ff fdc6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f7ff fdc0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f7ff fdbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000652:	2110      	movs	r1, #16
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <resetAllSegments+0x58>)
 8000656:	f7ff fdb7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800065a:	2102      	movs	r1, #2
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <resetAllSegments+0x58>)
 800065e:	f7ff fdb3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	48000400 	.word	0x48000400

0800066c <resetAllDigits>:

void resetAllDigits(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000670:	2104      	movs	r1, #4
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f7ff fdb5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800067a:	2120      	movs	r1, #32
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f7ff fdb0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000684:	2110      	movs	r1, #16
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff fdab 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f7ff fda6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f7ff fda1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <setA>:

void setA(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80006ac:	2102      	movs	r1, #2
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f7ff fd97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80006b6:	2101      	movs	r1, #1
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f7ff fd92 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f7ff fd8c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f7ff fd86 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80006d8:	2108      	movs	r1, #8
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f7ff fd81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80006e2:	2110      	movs	r1, #16
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <setA+0x50>)
 80006e6:	f7ff fd7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80006ea:	2120      	movs	r1, #32
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <setA+0x50>)
 80006ee:	f7ff fd6b 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	48000400 	.word	0x48000400

080006fc <seta>:
void seta(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000700:	2102      	movs	r1, #2
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f7ff fd6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800070a:	2101      	movs	r1, #1
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f7ff fd68 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f7ff fd62 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000720:	2120      	movs	r1, #32
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <seta+0x50>)
 8000724:	f7ff fd5e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f7ff fd58 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000734:	2110      	movs	r1, #16
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <seta+0x50>)
 8000738:	f7ff fd54 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800073c:	2108      	movs	r1, #8
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f7ff fd41 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	48000400 	.word	0x48000400

08000750 <setb>:
void setb(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f7ff fd42 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000760:	2120      	movs	r1, #32
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <setb+0x50>)
 8000764:	f7ff fd3e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f7ff fd38 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000774:	2108      	movs	r1, #8
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f7ff fd33 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800077e:	2110      	movs	r1, #16
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <setb+0x50>)
 8000782:	f7ff fd2f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000786:	2102      	movs	r1, #2
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f7ff fd1c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000790:	2101      	movs	r1, #1
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f7ff fd17 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	48000400 	.word	0x48000400

080007a4 <setC>:
void setC(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80007a8:	2102      	movs	r1, #2
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f7ff fd19 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007b2:	2120      	movs	r1, #32
 80007b4:	480f      	ldr	r0, [pc, #60]	; (80007f4 <setC+0x50>)
 80007b6:	f7ff fd15 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f7ff fd0f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007c6:	2108      	movs	r1, #8
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f7ff fd0a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80007d0:	2101      	movs	r1, #1
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f7ff fcf7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f7ff fcf1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80007e6:	2110      	movs	r1, #16
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <setC+0x50>)
 80007ea:	f7ff fced 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	48000400 	.word	0x48000400

080007f8 <setc>:
void setc(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <setc+0x50>)
 8000800:	f7ff fcf0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f7ff fcea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000810:	2110      	movs	r1, #16
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <setc+0x50>)
 8000814:	f7ff fce6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000818:	2102      	movs	r1, #2
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f7ff fcd3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000822:	2101      	movs	r1, #1
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f7ff fcce 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f7ff fcc8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000838:	2108      	movs	r1, #8
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f7ff fcc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48000400 	.word	0x48000400

0800084c <setd>:
void setd(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000850:	2101      	movs	r1, #1
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f7ff fcc5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f7ff fcbf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000866:	2120      	movs	r1, #32
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <setd+0x50>)
 800086a:	f7ff fcbb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800086e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f7ff fcb5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800087a:	2110      	movs	r1, #16
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <setd+0x50>)
 800087e:	f7ff fcb1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000882:	2102      	movs	r1, #2
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f7ff fc9e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800088c:	2108      	movs	r1, #8
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f7ff fc99 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	48000400 	.word	0x48000400

080008a0 <setE>:
void setE(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008a4:	2102      	movs	r1, #2
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f7ff fc9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008ae:	2120      	movs	r1, #32
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <setE+0x50>)
 80008b2:	f7ff fc97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f7ff fc91 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80008c2:	2108      	movs	r1, #8
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f7ff fc8c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80008cc:	2110      	movs	r1, #16
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <setE+0x50>)
 80008d0:	f7ff fc88 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80008d4:	2101      	movs	r1, #1
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f7ff fc75 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80008de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f7ff fc6f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	48000400 	.word	0x48000400

080008f4 <setF>:
void setF(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008f8:	2102      	movs	r1, #2
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f7ff fc71 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f7ff fc6b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800090e:	2108      	movs	r1, #8
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f7ff fc66 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000918:	2110      	movs	r1, #16
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <setF+0x50>)
 800091c:	f7ff fc62 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000920:	2101      	movs	r1, #1
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f7ff fc4f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f7ff fc49 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000936:	2120      	movs	r1, #32
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <setF+0x50>)
 800093a:	f7ff fc45 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	48000400 	.word	0x48000400

08000948 <setG>:
void setG(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800094c:	2102      	movs	r1, #2
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f7ff fc47 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f7ff fc41 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000962:	2120      	movs	r1, #32
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <setG+0x50>)
 8000966:	f7ff fc3d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800096a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f7ff fc37 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000976:	2108      	movs	r1, #8
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f7ff fc32 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000980:	2101      	movs	r1, #1
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f7ff fc1f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800098a:	2110      	movs	r1, #16
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <setG+0x50>)
 800098e:	f7ff fc1b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	48000400 	.word	0x48000400

0800099c <setH>:
void setH(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80009a0:	2101      	movs	r1, #1
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f7ff fc1d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f7ff fc17 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f7ff fc11 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009c2:	2108      	movs	r1, #8
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f7ff fc0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80009cc:	2110      	movs	r1, #16
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <setH+0x50>)
 80009d0:	f7ff fc08 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80009d4:	2102      	movs	r1, #2
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f7ff fbf5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <setH+0x50>)
 80009e2:	f7ff fbf1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	48000400 	.word	0x48000400

080009f0 <seth>:
void seth(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f7ff fbf2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f7ff fbec 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f7ff fbe7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a16:	2110      	movs	r1, #16
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <seth+0x50>)
 8000a1a:	f7ff fbe3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a1e:	2102      	movs	r1, #2
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f7ff fbd0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f7ff fbcb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a32:	2120      	movs	r1, #32
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <seth+0x50>)
 8000a36:	f7ff fbc7 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	48000400 	.word	0x48000400

08000a44 <setI>:
void setI(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f7ff fbc8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a54:	2108      	movs	r1, #8
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f7ff fbc3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a5e:	2102      	movs	r1, #2
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f7ff fbb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f7ff fbab 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f7ff fba5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <setI+0x50>)
 8000a82:	f7ff fba1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000a86:	2110      	movs	r1, #16
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <setI+0x50>)
 8000a8a:	f7ff fb9d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48000400 	.word	0x48000400

08000a98 <setJ>:
void setJ(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f7ff fb9f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f7ff fb99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <setJ+0x50>)
 8000ab6:	f7ff fb95 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f7ff fb8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f7ff fb7c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f7ff fb77 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ada:	2110      	movs	r1, #16
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <setJ+0x50>)
 8000ade:	f7ff fb73 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	48000400 	.word	0x48000400

08000aec <setL>:
void setL(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000af0:	2120      	movs	r1, #32
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <setL+0x50>)
 8000af4:	f7ff fb76 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f7ff fb70 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b04:	2108      	movs	r1, #8
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f7ff fb6b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b0e:	2102      	movs	r1, #2
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f7ff fb58 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f7ff fb53 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f7ff fb4d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <setL+0x50>)
 8000b32:	f7ff fb49 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	48000400 	.word	0x48000400

08000b40 <setn>:
void setn(void){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f7ff fb4a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f7ff fb44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <setn+0x50>)
 8000b60:	f7ff fb40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b64:	2102      	movs	r1, #2
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f7ff fb2d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f7ff fb28 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <setn+0x50>)
 8000b7c:	f7ff fb24 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000b80:	2108      	movs	r1, #8
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f7ff fb1f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	48000400 	.word	0x48000400

08000b94 <setO>:
void setO(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f7ff fb21 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f7ff fb1c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f7ff fb16 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bb8:	2120      	movs	r1, #32
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <setO+0x50>)
 8000bbc:	f7ff fb12 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f7ff fb0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000bcc:	2108      	movs	r1, #8
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f7ff fb07 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <setO+0x50>)
 8000bda:	f7ff faf5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	48000400 	.word	0x48000400

08000be8 <seto>:
void seto(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f7ff faf6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <seto+0x50>)
 8000bfc:	f7ff faf2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f7ff faec 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <seto+0x50>)
 8000c10:	f7ff fae8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c14:	2102      	movs	r1, #2
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f7ff fad5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f7ff fad0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c28:	2108      	movs	r1, #8
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f7ff facb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <setP>:
void setP(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c40:	2102      	movs	r1, #2
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f7ff facd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f7ff fac8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f7ff fac2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c60:	2108      	movs	r1, #8
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f7ff fabd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <setP+0x50>)
 8000c6e:	f7ff fab9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f7ff faa5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <setP+0x50>)
 8000c82:	f7ff faa1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	48000400 	.word	0x48000400

08000c90 <setq>:
void setq(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c94:	2102      	movs	r1, #2
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f7ff faa3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f7ff fa9e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f7ff fa98 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f7ff fa93 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <setq+0x50>)
 8000cc2:	f7ff fa8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <setq+0x50>)
 8000cca:	f7ff fa7d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f7ff fa77 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <setr>:
void setr(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f7ff fa78 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <setr+0x50>)
 8000cf8:	f7ff fa74 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f7ff fa61 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d06:	2101      	movs	r1, #1
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f7ff fa5c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f7ff fa56 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <setr+0x50>)
 8000d20:	f7ff fa52 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000d24:	2108      	movs	r1, #8
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f7ff fa4d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	48000400 	.word	0x48000400

08000d38 <setS>:
void setS(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f7ff fa4f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f7ff fa49 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d52:	2120      	movs	r1, #32
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <setS+0x50>)
 8000d56:	f7ff fa45 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f7ff fa40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d64:	2110      	movs	r1, #16
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <setS+0x50>)
 8000d68:	f7ff fa3c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f7ff fa29 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f7ff fa23 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	48000400 	.word	0x48000400

08000d8c <sett>:
void sett(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d90:	2120      	movs	r1, #32
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <sett+0x50>)
 8000d94:	f7ff fa26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f7ff fa20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000da4:	2108      	movs	r1, #8
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f7ff fa1b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000dae:	2110      	movs	r1, #16
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <sett+0x50>)
 8000db2:	f7ff fa17 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000db6:	2102      	movs	r1, #2
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f7ff fa04 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f7ff f9ff 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f7ff f9f9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	48000400 	.word	0x48000400

08000de0 <setU>:
void setU(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000de4:	2101      	movs	r1, #1
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f7ff f9fb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f7ff f9f5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <setU+0x50>)
 8000dfe:	f7ff f9f1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f7ff f9eb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e0e:	2108      	movs	r1, #8
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f7ff f9e6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e18:	2102      	movs	r1, #2
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f7ff f9d3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e22:	2110      	movs	r1, #16
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <setU+0x50>)
 8000e26:	f7ff f9cf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	48000400 	.word	0x48000400

08000e34 <setu>:
void setu(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f7ff f9d0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e44:	2120      	movs	r1, #32
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <setu+0x50>)
 8000e48:	f7ff f9cc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f7ff f9c6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e58:	2102      	movs	r1, #2
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f7ff f9b3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e62:	2101      	movs	r1, #1
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f7ff f9ae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f7ff f9a9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e76:	2110      	movs	r1, #16
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <setu+0x50>)
 8000e7a:	f7ff f9a5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	48000400 	.word	0x48000400

08000e88 <sety>:
void sety(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f7ff f9a7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f7ff f9a1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <sety+0x50>)
 8000ea6:	f7ff f99d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000eaa:	2108      	movs	r1, #8
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f7ff f998 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <sety+0x50>)
 8000eb8:	f7ff f994 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f7ff f981 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000ec6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f7ff f97b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	48000400 	.word	0x48000400

08000edc <setK>:


// Disgusting letters :D
void setK(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f7ff f97d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f7ff f977 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f7ff f971 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f02:	2108      	movs	r1, #8
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f7ff f96c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <setK+0x50>)
 8000f10:	f7ff f968 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f14:	2101      	movs	r1, #1
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f7ff f955 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <setK+0x50>)
 8000f22:	f7ff f951 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	48000400 	.word	0x48000400

08000f30 <setM>:
void setM(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f34:	2102      	movs	r1, #2
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff f953 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f7ff f94e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f48:	2120      	movs	r1, #32
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <setM+0x48>)
 8000f4c:	f7ff f94a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f50:	2108      	movs	r1, #8
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f7ff f945 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f7ff f931 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f7ff f92b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	48000400 	.word	0x48000400

08000f7c <setV>:
void setV(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f80:	2101      	movs	r1, #1
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f7ff f92d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	480f      	ldr	r0, [pc, #60]	; (8000fcc <setV+0x50>)
 8000f8e:	f7ff f929 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f92:	2108      	movs	r1, #8
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f7ff f924 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f7ff f911 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f7ff f90b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f7ff f905 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <setV+0x50>)
 8000fc2:	f7ff f901 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <setW>:
void setW(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f7ff f903 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f7ff f8fd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000fea:	2120      	movs	r1, #32
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <setW+0x50>)
 8000fee:	f7ff f8f9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f7ff f8f3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ffe:	2108      	movs	r1, #8
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f7ff f8ee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001008:	2110      	movs	r1, #16
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <setW+0x50>)
 800100c:	f7ff f8ea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001010:	2102      	movs	r1, #2
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f7ff f8d7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400

08001024 <setX>:
void setX(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001028:	2102      	movs	r1, #2
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f7ff f8d9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001032:	2120      	movs	r1, #32
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <setX+0x50>)
 8001036:	f7ff f8d5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800103a:	2110      	movs	r1, #16
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <setX+0x50>)
 800103e:	f7ff f8d1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001042:	2101      	movs	r1, #1
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f7ff f8be 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800104c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f7ff f8b8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f7ff f8b2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001064:	2108      	movs	r1, #8
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f7ff f8ad 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	48000400 	.word	0x48000400

08001078 <setZ>:
void setZ(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800107c:	2102      	movs	r1, #2
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f7ff f8af 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001086:	2101      	movs	r1, #1
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f7ff f8aa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001090:	2120      	movs	r1, #32
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <setZ+0x50>)
 8001094:	f7ff f8a6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f7ff f8a0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010a4:	2110      	movs	r1, #16
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <setZ+0x50>)
 80010a8:	f7ff f89c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f7ff f888 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010b8:	2108      	movs	r1, #8
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f7ff f883 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	48000400 	.word	0x48000400

080010cc <setOne>:

// numbers
void setOne(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010d0:	2101      	movs	r1, #1
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f7ff f885 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f7ff f87f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80010e6:	2102      	movs	r1, #2
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f7ff f86c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80010f0:	2120      	movs	r1, #32
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <setOne+0x50>)
 80010f4:	f7ff f868 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80010f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f7ff f862 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001104:	2108      	movs	r1, #8
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f7ff f85d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800110e:	2110      	movs	r1, #16
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <setOne+0x50>)
 8001112:	f7ff f859 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	48000400 	.word	0x48000400

08001120 <setTwo>:
void setTwo(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001124:	2102      	movs	r1, #2
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f7ff f85b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800112e:	2101      	movs	r1, #1
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f7ff f856 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001138:	2120      	movs	r1, #32
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <setTwo+0x50>)
 800113c:	f7ff f852 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f7ff f84c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800114c:	2110      	movs	r1, #16
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <setTwo+0x50>)
 8001150:	f7ff f848 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f7ff f834 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001160:	2108      	movs	r1, #8
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f7ff f82f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	48000400 	.word	0x48000400

08001174 <setThree>:
void setThree(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001178:	2102      	movs	r1, #2
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f7ff f831 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001182:	2101      	movs	r1, #1
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f7ff f82c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f7ff f826 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001198:	2120      	movs	r1, #32
 800119a:	480a      	ldr	r0, [pc, #40]	; (80011c4 <setThree+0x50>)
 800119c:	f7ff f822 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011a0:	2110      	movs	r1, #16
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <setThree+0x50>)
 80011a4:	f7ff f81e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f7ff f80a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011b4:	2108      	movs	r1, #8
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f7ff f805 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	48000400 	.word	0x48000400

080011c8 <setFour>:
void setFour(void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80011cc:	2101      	movs	r1, #1
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f7ff f807 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f7ff f801 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80011e2:	2108      	movs	r1, #8
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f7fe fffc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011ec:	2110      	movs	r1, #16
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <setFour+0x50>)
 80011f0:	f7fe fff8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80011f4:	2102      	movs	r1, #2
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f7fe ffe5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80011fe:	2120      	movs	r1, #32
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <setFour+0x50>)
 8001202:	f7fe ffe1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f7fe ffdb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48000400 	.word	0x48000400

0800121c <setFive>:
void setFive(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001220:	2102      	movs	r1, #2
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f7fe ffdd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800122a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f7fe ffd7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001236:	2120      	movs	r1, #32
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <setFive+0x50>)
 800123a:	f7fe ffd3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800123e:	2108      	movs	r1, #8
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f7fe ffce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001248:	2110      	movs	r1, #16
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <setFive+0x50>)
 800124c:	f7fe ffca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001250:	2101      	movs	r1, #1
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f7fe ffb7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800125a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7fe ffb1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	48000400 	.word	0x48000400

08001270 <setSix>:
void setSix(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001274:	2102      	movs	r1, #2
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f7fe ffb3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f7fe ffad 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800128a:	2120      	movs	r1, #32
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <setSix+0x50>)
 800128e:	f7fe ffa9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f7fe ffa3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800129e:	2108      	movs	r1, #8
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f7fe ff9e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80012a8:	2110      	movs	r1, #16
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <setSix+0x50>)
 80012ac:	f7fe ff9a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012b0:	2101      	movs	r1, #1
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f7fe ff87 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	48000400 	.word	0x48000400

080012c4 <setSeven>:
void setSeven(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012c8:	2102      	movs	r1, #2
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f7fe ff89 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80012d2:	2101      	movs	r1, #1
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f7fe ff84 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f7fe ff7e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80012e8:	2120      	movs	r1, #32
 80012ea:	480a      	ldr	r0, [pc, #40]	; (8001314 <setSeven+0x50>)
 80012ec:	f7fe ff6c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80012f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f7fe ff66 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80012fc:	2108      	movs	r1, #8
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f7fe ff61 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001306:	2110      	movs	r1, #16
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <setSeven+0x50>)
 800130a:	f7fe ff5d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	48000400 	.word	0x48000400

08001318 <setEight>:
void setEight(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800131c:	2102      	movs	r1, #2
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f7fe ff5f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001326:	2101      	movs	r1, #1
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f7fe ff5a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f7fe ff54 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800133c:	2120      	movs	r1, #32
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <setEight+0x50>)
 8001340:	f7fe ff50 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f7fe ff4a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001350:	2108      	movs	r1, #8
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7fe ff45 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800135a:	2110      	movs	r1, #16
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <setEight+0x50>)
 800135e:	f7fe ff41 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	48000400 	.word	0x48000400

0800136c <setNine>:
void setNine(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001370:	2102      	movs	r1, #2
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f7fe ff35 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800137a:	2101      	movs	r1, #1
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f7fe ff30 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f7fe ff2a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001390:	2120      	movs	r1, #32
 8001392:	480a      	ldr	r0, [pc, #40]	; (80013bc <setNine+0x50>)
 8001394:	f7fe ff26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001398:	2108      	movs	r1, #8
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f7fe ff21 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80013a2:	2110      	movs	r1, #16
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <setNine+0x50>)
 80013a6:	f7fe ff1d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f7fe ff09 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	48000400 	.word	0x48000400

080013c0 <setZero>:
void setZero(void){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013c4:	2102      	movs	r1, #2
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f7fe ff0b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013ce:	2101      	movs	r1, #1
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f7fe ff06 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f7fe ff00 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013e4:	2120      	movs	r1, #32
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <setZero+0x50>)
 80013e8:	f7fe fefc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80013ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f7fe fef6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013f8:	2108      	movs	r1, #8
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f7fe fef1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001402:	2110      	movs	r1, #16
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <setZero+0x50>)
 8001406:	f7fe fedf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	48000400 	.word	0x48000400

08001414 <setDot>:

// and dot to end
void setDot(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 8001418:	2102      	movs	r1, #2
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <setDot+0x10>)
 800141c:	f7fe fee2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	48000400 	.word	0x48000400

08001428 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4013      	ands	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000

08001458 <LL_GPIO_ResetOutputPin>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800148a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800148e:	f7ff ffcb 	bl	8001428 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001492:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001496:	f7ff ffc7 	bl	8001428 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800149a:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f7ff ffd9 	bl	8001458 <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 80014a6:	2132      	movs	r1, #50	; 0x32
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <MX_GPIO_Init+0x84>)
 80014aa:	f7ff ffd5 	bl	8001458 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80014ae:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80014b2:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f000 fd46 	bl	8001f5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 80014d0:	2332      	movs	r3, #50	; 0x32
 80014d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_GPIO_Init+0x84>)
 80014ea:	f000 fd37 	bl	8001f5c <LL_GPIO_Init>

}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	48000400 	.word	0x48000400

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_RCC_HSI_Enable+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <LL_RCC_HSI_Enable+0x1c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <LL_RCC_HSI_IsReady+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b02      	cmp	r3, #2
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000

08001588 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <LL_RCC_SetSysClkSource+0x24>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 0203 	bic.w	r2, r3, #3
 80015c4:	4904      	ldr	r1, [pc, #16]	; (80015d8 <LL_RCC_SetSysClkSource+0x24>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000

080015dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <LL_RCC_GetSysClkSource+0x18>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <LL_RCC_SetAHBPrescaler+0x24>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_RCC_SetAHBPrescaler+0x24>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_RCC_SetAPB1Prescaler+0x24>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <LL_RCC_SetAPB2Prescaler+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000

08001670 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <LL_APB1_GRP1_EnableClock+0x2c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <LL_APB1_GRP1_EnableClock+0x2c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4313      	orrs	r3, r2
 8001682:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000

080016a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <LL_FLASH_SetLatency+0x24>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4904      	ldr	r1, [pc, #16]	; (80016f4 <LL_FLASH_SetLatency+0x24>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40022000 	.word	0x40022000

080016f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <LL_FLASH_GetLatency+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff ffa1 	bl	80016a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800175e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001762:	f7ff ff85 	bl	8001670 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001766:	2003      	movs	r0, #3
 8001768:	f7ff fec8 	bl	80014fc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f81a 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f7ff fe80 	bl	8001474 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001774:	f000 fa06 	bl	8001b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001778:	f000 fa66 	bl	8001c48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 800177c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001780:	f7ff ffd8 	bl	8001734 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 8001784:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001788:	f7ff ffc4 	bl	8001714 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_CC2(TIM3);
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <main+0x4c>)
 800178e:	f7ff ffd1 	bl	8001734 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM3);
 8001792:	4803      	ldr	r0, [pc, #12]	; (80017a0 <main+0x4c>)
 8001794:	f7ff ffbe 	bl	8001714 <LL_TIM_EnableCounter>

  resetAllDigits();
 8001798:	f7fe ff68 	bl	800066c <resetAllDigits>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800179c:	e7fe      	b.n	800179c <main+0x48>
 800179e:	bf00      	nop
 80017a0:	40000400 	.word	0x40000400

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ff91 	bl	80016d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffa2 	bl	80016f8 <LL_FLASH_GetLatency>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1fa      	bne.n	80017b0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80017ba:	f7ff fec3 	bl	8001544 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017be:	bf00      	nop
 80017c0:	f7ff fed0 	bl	8001564 <LL_RCC_HSI_IsReady>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d1fa      	bne.n	80017c0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80017ca:	2010      	movs	r0, #16
 80017cc:	f7ff fedc 	bl	8001588 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ff11 	bl	80015f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff ff22 	bl	8001620 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff ff33 	bl	8001648 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fee6 	bl	80015b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80017e8:	bf00      	nop
 80017ea:	f7ff fef7 	bl	80015dc <LL_RCC_GetSysClkSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1fa      	bne.n	80017ea <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <SystemClock_Config+0x60>)
 80017f6:	f001 f835 	bl	8002864 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <SystemClock_Config+0x60>)
 80017fc:	f001 f840 	bl	8002880 <LL_SetSystemCoreClock>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	007a1200 	.word	0x007a1200

08001808 <LL_TIM_ClearFlag_UPDATE>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f06f 0201 	mvn.w	r2, #1
 8001816:	611a      	str	r2, [r3, #16]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184e:	e7fe      	b.n	800184e <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <HardFault_Handler+0x4>

08001856 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <BusFault_Handler+0x4>

08001862 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <UsageFault_Handler+0x4>

08001868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80018a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a8:	f7ff ffbc 	bl	8001824 <LL_TIM_IsActiveFlag_UPDATE>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <TIM2_IRQHandler+0x16>
		shiftDisplayText();
 80018b2:	f7fe fd23 	bl	80002fc <shiftDisplayText>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80018b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ba:	f7ff ffa5 	bl	8001808 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <TIM3_IRQHandler+0x20>)
 80018ca:	f7ff ffab 	bl	8001824 <LL_TIM_IsActiveFlag_UPDATE>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <TIM3_IRQHandler+0x14>
		updateDisplay();
 80018d4:	f7fe fc94 	bl	8000200 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM3_IRQHandler+0x20>)
 80018da:	f7ff ff95 	bl	8001808 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40000400 	.word	0x40000400

080018e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <LL_APB1_GRP1_EnableClock>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000

08001a50 <LL_TIM_DisableARRPreload>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_TIM_OC_DisableFast>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d028      	beq.n	8001ad2 <LL_TIM_OC_DisableFast+0x62>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d023      	beq.n	8001ace <LL_TIM_OC_DisableFast+0x5e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d01e      	beq.n	8001aca <LL_TIM_OC_DisableFast+0x5a>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d019      	beq.n	8001ac6 <LL_TIM_OC_DisableFast+0x56>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d013      	beq.n	8001ac2 <LL_TIM_OC_DisableFast+0x52>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa0:	d00d      	beq.n	8001abe <LL_TIM_OC_DisableFast+0x4e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa8:	d007      	beq.n	8001aba <LL_TIM_OC_DisableFast+0x4a>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d101      	bne.n	8001ab6 <LL_TIM_OC_DisableFast+0x46>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00e      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00c      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_TIM_OC_DisableFast+0x64>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	4619      	mov	r1, r3
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LL_TIM_OC_DisableFast+0x9c>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	4908      	ldr	r1, [pc, #32]	; (8001b10 <LL_TIM_OC_DisableFast+0xa0>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	4619      	mov	r1, r3
 8001af2:	2304      	movs	r3, #4
 8001af4:	408b      	lsls	r3, r1
 8001af6:	43db      	mvns	r3, r3
 8001af8:	401a      	ands	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	08002924 	.word	0x08002924
 8001b10:	08002930 	.word	0x08002930

08001b14 <LL_TIM_SetClockSource>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001b26:	f023 0307 	bic.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_TIM_SetTriggerOutput>:
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_TIM_DisableMasterSlaveMode>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fea1 	bl	80028e8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff ff3a 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bac:	f7ff feae 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fefe 	bl	80019b8 <NVIC_EncodePriority>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	201c      	movs	r0, #28
 8001bc2:	f7ff fecf 	bl	8001964 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f7ff feae 	bl	8001928 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001bcc:	f240 331f 	movw	r3, #799	; 0x31f
 8001bd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 8001bd6:	f241 3387 	movw	r3, #4999	; 0x1387
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001bea:	f000 fab7 	bl	800215c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001bee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001bf2:	f7ff ff2d 	bl	8001a50 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001bfc:	f7ff ff8a 	bl	8001b14 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	461a      	mov	r2, r3
 8001c18:	2101      	movs	r1, #1
 8001c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c1e:	f000 fb0f 	bl	8002240 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c28:	f7ff ff22 	bl	8001a70 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c32:	f7ff ff84 	bl	8001b3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001c36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c3a:	f7ff ff93 	bl	8001b64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	; 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	; 0x38
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2220      	movs	r2, #32
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fe3f 	bl	80028e8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7ff fed8 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c70:	f7ff fe4c 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe9c 	bl	80019b8 <NVIC_EncodePriority>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	201d      	movs	r0, #29
 8001c86:	f7ff fe6d 	bl	8001964 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001c8a:	201d      	movs	r0, #29
 8001c8c:	f7ff fe4c 	bl	8001928 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001c90:	f240 331f 	movw	r3, #799	; 0x31f
 8001c94:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 9;
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001caa:	f000 fa57 	bl	800215c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001cae:	4813      	ldr	r0, [pc, #76]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001cb0:	f7ff fece 	bl	8001a50 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4811      	ldr	r0, [pc, #68]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001cb8:	f7ff ff2c 	bl	8001b14 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001cd8:	f000 fab2 	bl	8002240 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001ce0:	f7ff fec6 	bl	8001a70 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001ce8:	f7ff ff29 	bl	8001b3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0xb4>)
 8001cee:	f7ff ff39 	bl	8001b64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3738      	adds	r7, #56	; 0x38
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40000400 	.word	0x40000400

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d2a:	f7ff fddd 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f000 fdb7 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7ff fd0f 	bl	8001754 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001d44:	08002944 	.word	0x08002944
  ldr r2, =_sbss
 8001d48:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001d4c:	20000028 	.word	0x20000028

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>

08001d52 <LL_GPIO_SetPinMode>:
{
 8001d52:	b480      	push	{r7}
 8001d54:	b089      	sub	sp, #36	; 0x24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2103      	movs	r1, #3
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_GPIO_SetPinOutputType>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_GPIO_SetPinSpeed>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	613b      	str	r3, [r7, #16]
  return result;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2103      	movs	r1, #3
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	609a      	str	r2, [r3, #8]
}
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_GPIO_SetPinPull>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b089      	sub	sp, #36	; 0x24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	613b      	str	r3, [r7, #16]
  return result;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2103      	movs	r1, #3
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61bb      	str	r3, [r7, #24]
  return result;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	60da      	str	r2, [r3, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_GPIO_SetAFPin_0_7>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	613b      	str	r3, [r7, #16]
  return result;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	621a      	str	r2, [r3, #32]
}
 8001eee:	bf00      	nop
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_GPIO_SetAFPin_8_15>:
{
 8001efa:	b480      	push	{r7}
 8001efc:	b089      	sub	sp, #36	; 0x24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	613b      	str	r3, [r7, #16]
  return result;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	210f      	movs	r1, #15
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	61bb      	str	r3, [r7, #24]
  return result;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f50:	bf00      	nop
 8001f52:	3724      	adds	r7, #36	; 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	613b      	str	r3, [r7, #16]
  return result;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f7e:	e051      	b.n	8002024 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d043      	beq.n	800201e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d003      	beq.n	8001fa6 <LL_GPIO_Init+0x4a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d10e      	bne.n	8001fc4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	461a      	mov	r2, r3
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff16 	bl	8001de0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fef6 	bl	8001db0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff36 	bl	8001e3e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d11a      	bne.n	8002010 <LL_GPIO_Init+0xb4>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	60bb      	str	r3, [r7, #8]
  return result;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d807      	bhi.n	8002002 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	69b9      	ldr	r1, [r7, #24]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff4e 	bl	8001e9c <LL_GPIO_SetAFPin_0_7>
 8002000:	e006      	b.n	8002010 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	461a      	mov	r2, r3
 8002008:	69b9      	ldr	r1, [r7, #24]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff75 	bl	8001efa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	461a      	mov	r2, r3
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fe9a 	bl	8001d52 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1a6      	bne.n	8001f80 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_TIM_SetPrescaler>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_TIM_SetAutoReload>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_TIM_SetRepetitionCounter>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_TIM_OC_SetCompareCH1>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_OC_SetCompareCH2>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_TIM_OC_SetCompareCH3>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_TIM_OC_SetCompareCH4>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_TIM_OC_SetCompareCH5>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_TIM_OC_SetCompareCH6>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	615a      	str	r2, [r3, #20]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <LL_TIM_Init+0xd0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <LL_TIM_Init+0x28>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d003      	beq.n	8002184 <LL_TIM_Init+0x28>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <LL_TIM_Init+0xd4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d106      	bne.n	8002192 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <LL_TIM_Init+0xd0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <LL_TIM_Init+0x66>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a0:	d00f      	beq.n	80021c2 <LL_TIM_Init+0x66>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <LL_TIM_Init+0xd4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <LL_TIM_Init+0x66>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a21      	ldr	r2, [pc, #132]	; (8002234 <LL_TIM_Init+0xd8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <LL_TIM_Init+0x66>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <LL_TIM_Init+0xdc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <LL_TIM_Init+0x66>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <LL_TIM_Init+0xe0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d106      	bne.n	80021d0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff3b 	bl	8002058 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff27 	bl	800203c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0e      	ldr	r2, [pc, #56]	; (800222c <LL_TIM_Init+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00b      	beq.n	800220e <LL_TIM_Init+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <LL_TIM_Init+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <LL_TIM_Init+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <LL_TIM_Init+0xdc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <LL_TIM_Init+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0c      	ldr	r2, [pc, #48]	; (800223c <LL_TIM_Init+0xe0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d105      	bne.n	800221a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff2d 	bl	8002074 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff8e 	bl	800213c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40000400 	.word	0x40000400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800

08002240 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002256:	d045      	beq.n	80022e4 <LL_TIM_OC_Init+0xa4>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800225e:	d848      	bhi.n	80022f2 <LL_TIM_OC_Init+0xb2>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d036      	beq.n	80022d6 <LL_TIM_OC_Init+0x96>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226e:	d840      	bhi.n	80022f2 <LL_TIM_OC_Init+0xb2>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d027      	beq.n	80022c8 <LL_TIM_OC_Init+0x88>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d838      	bhi.n	80022f2 <LL_TIM_OC_Init+0xb2>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002286:	d018      	beq.n	80022ba <LL_TIM_OC_Init+0x7a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228e:	d830      	bhi.n	80022f2 <LL_TIM_OC_Init+0xb2>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d003      	beq.n	800229e <LL_TIM_OC_Init+0x5e>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d007      	beq.n	80022ac <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800229c:	e029      	b.n	80022f2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f82d 	bl	8002300 <OC1Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
      break;
 80022aa:	e023      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f8a0 	bl	80023f4 <OC2Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	75fb      	strb	r3, [r7, #23]
      break;
 80022b8:	e01c      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f917 	bl	80024f0 <OC3Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	75fb      	strb	r3, [r7, #23]
      break;
 80022c6:	e015      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f98e 	bl	80025ec <OC4Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]
      break;
 80022d4:	e00e      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f9ed 	bl	80026b8 <OC5Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
      break;
 80022e2:	e007      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fa44 	bl	8002774 <OC6Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	75fb      	strb	r3, [r7, #23]
      break;
 80022f0:	e000      	b.n	80022f4 <LL_TIM_OC_Init+0xb4>
      break;
 80022f2:	bf00      	nop
  }

  return result;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f023 0201 	bic.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0202 	bic.w	r2, r3, #2
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f023 0201 	bic.w	r2, r3, #1
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <OC1Config+0xe4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00b      	beq.n	800237e <OC1Config+0x7e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <OC1Config+0xe8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <OC1Config+0x7e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <OC1Config+0xec>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <OC1Config+0x7e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <OC1Config+0xf0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11e      	bne.n	80023bc <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f023 0208 	bic.w	r2, r3, #8
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f023 0204 	bic.w	r2, r3, #4
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fe5e 	bl	8002090 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40014000 	.word	0x40014000
 80023ec:	40014400 	.word	0x40014400
 80023f0:	40014800 	.word	0x40014800

080023f4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0210 	bic.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	0212      	lsls	r2, r2, #8
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0220 	bic.w	r2, r3, #32
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0210 	bic.w	r2, r3, #16
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <OC2Config+0xec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00b      	beq.n	8002478 <OC2Config+0x84>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <OC2Config+0xf0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <OC2Config+0x84>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <OC2Config+0xf4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <OC2Config+0x84>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <OC2Config+0xf8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d11f      	bne.n	80024b8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fdee 	bl	80020ac <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40014400 	.word	0x40014400
 80024ec:	40014800 	.word	0x40014800

080024f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <OC3Config+0xec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00b      	beq.n	8002572 <OC3Config+0x82>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <OC3Config+0xf0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <OC3Config+0x82>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <OC3Config+0xf4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <OC3Config+0x82>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <OC3Config+0xf8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11f      	bne.n	80025b2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	029b      	lsls	r3, r3, #10
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fd7f 	bl	80020c8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800

080025ec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	0212      	lsls	r2, r2, #8
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	031b      	lsls	r3, r3, #12
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	031b      	lsls	r3, r3, #12
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <OC4Config+0xbc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <OC4Config+0x84>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <OC4Config+0xc0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <OC4Config+0x84>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <OC4Config+0xc4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <OC4Config+0x84>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <OC4Config+0xc8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d107      	bne.n	8002680 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	019b      	lsls	r3, r3, #6
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fd26 	bl	80020e4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800

080026b8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <OC5Config+0xac>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <OC5Config+0x74>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a14      	ldr	r2, [pc, #80]	; (8002768 <OC5Config+0xb0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <OC5Config+0x74>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <OC5Config+0xb4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <OC5Config+0x74>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <OC5Config+0xb8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff fcd7 	bl	8002100 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40014000 	.word	0x40014000
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800

08002774 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	0212      	lsls	r2, r2, #8
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	051b      	lsls	r3, r3, #20
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <OC6Config+0xac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <OC6Config+0x76>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a13      	ldr	r2, [pc, #76]	; (8002824 <OC6Config+0xb0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <OC6Config+0x76>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <OC6Config+0xb4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <OC6Config+0x76>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <OC6Config+0xb8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d109      	bne.n	80027fe <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fc88 	bl	8002120 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800

08002830 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <LL_InitTick+0x30>)
 8002844:	3b01      	subs	r3, #1
 8002846:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <LL_InitTick+0x30>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <LL_InitTick+0x30>)
 8002850:	2205      	movs	r2, #5
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e010 	.word	0xe000e010

08002864 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800286c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffdd 	bl	8002830 <LL_InitTick>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <LL_SetSystemCoreClock+0x1c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	4d0d      	ldr	r5, [pc, #52]	; (80028d8 <__libc_init_array+0x38>)
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <__libc_init_array+0x3c>)
 80028a6:	1b64      	subs	r4, r4, r5
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	2600      	movs	r6, #0
 80028ac:	42a6      	cmp	r6, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	4d0b      	ldr	r5, [pc, #44]	; (80028e0 <__libc_init_array+0x40>)
 80028b2:	4c0c      	ldr	r4, [pc, #48]	; (80028e4 <__libc_init_array+0x44>)
 80028b4:	f000 f820 	bl	80028f8 <_init>
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	2600      	movs	r6, #0
 80028be:	42a6      	cmp	r6, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c8:	4798      	blx	r3
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d2:	4798      	blx	r3
 80028d4:	3601      	adds	r6, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	0800293c 	.word	0x0800293c
 80028dc:	0800293c 	.word	0x0800293c
 80028e0:	0800293c 	.word	0x0800293c
 80028e4:	08002940 	.word	0x08002940

080028e8 <memset>:
 80028e8:	4402      	add	r2, r0
 80028ea:	4603      	mov	r3, r0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d100      	bne.n	80028f2 <memset+0xa>
 80028f0:	4770      	bx	lr
 80028f2:	f803 1b01 	strb.w	r1, [r3], #1
 80028f6:	e7f9      	b.n	80028ec <memset+0x4>

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
