
VRS_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000020  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b02  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001250  00000000  00000000  00025b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  00026d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016620  00000000  00000000  000279d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ea0  00000000  00000000  0003dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077eeb  00000000  00000000  00042e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bad83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001858  00000000  00000000  000badd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002978 	.word	0x08002978

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002978 	.word	0x08002978

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <updateDisplay>:
#include "display.h"
uint8_t updateDigit = 1;
uint8_t displayTextPos = 0;
uint8_t direction = 0;

void updateDisplay(){
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	char displayString[] = "MICHAL MOLnAr 98352";
 8000206:	4b41      	ldr	r3, [pc, #260]	; (800030c <updateDisplay+0x10c>)
 8000208:	463c      	mov	r4, r7
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	682b      	ldr	r3, [r5, #0]
 8000212:	6023      	str	r3, [r4, #0]
	for(int i = 1; i<5; i++){
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	e06f      	b.n	80002fa <updateDisplay+0xfa>
		switch(updateDigit){
 800021a:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <updateDisplay+0x110>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3b01      	subs	r3, #1
 8000220:	2b03      	cmp	r3, #3
 8000222:	d856      	bhi.n	80002d2 <updateDisplay+0xd2>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <updateDisplay+0x2c>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	0800023d 	.word	0x0800023d
 8000230:	08000261 	.word	0x08000261
 8000234:	08000287 	.word	0x08000287
 8000238:	080002ad 	.word	0x080002ad
				case 1:
					DIGIT_1_ON;
 800023c:	2120      	movs	r1, #32
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f7ff ffc1 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000246:	f000 f9fd 	bl	8000644 <resetAllSegments>
					displayLetter(displayString[displayTextPos]);
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <updateDisplay+0x114>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	f107 0218 	add.w	r2, r7, #24
 8000252:	4413      	add	r3, r2
 8000254:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f8ab 	bl	80003b4 <displayLetter>
					break;
 800025e:	e038      	b.n	80002d2 <updateDisplay+0xd2>
				case 2:
					DIGIT_2_ON;
 8000260:	2110      	movs	r1, #16
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f7ff ffaf 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 800026a:	f000 f9eb 	bl	8000644 <resetAllSegments>
					displayLetter(displayString[displayTextPos+1]);
 800026e:	4b29      	ldr	r3, [pc, #164]	; (8000314 <updateDisplay+0x114>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	f107 0218 	add.w	r2, r7, #24
 8000278:	4413      	add	r3, r2
 800027a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f898 	bl	80003b4 <displayLetter>
					break;
 8000284:	e025      	b.n	80002d2 <updateDisplay+0xd2>
				case 3:
					DIGIT_3_ON;
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f7ff ff9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000290:	f000 f9d8 	bl	8000644 <resetAllSegments>
					displayLetter(displayString[displayTextPos+2]);
 8000294:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <updateDisplay+0x114>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	f107 0218 	add.w	r2, r7, #24
 800029e:	4413      	add	r3, r2
 80002a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f885 	bl	80003b4 <displayLetter>
					break;
 80002aa:	e012      	b.n	80002d2 <updateDisplay+0xd2>
				case 4:
					DIGIT_4_ON;
 80002ac:	2104      	movs	r1, #4
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f7ff ff89 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 80002b6:	f000 f9c5 	bl	8000644 <resetAllSegments>
					displayLetter(displayString[displayTextPos+3]);
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <updateDisplay+0x114>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3303      	adds	r3, #3
 80002c0:	f107 0218 	add.w	r2, r7, #24
 80002c4:	4413      	add	r3, r2
 80002c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f872 	bl	80003b4 <displayLetter>
					break;
 80002d0:	bf00      	nop
			}
			updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <updateDisplay+0x110>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d804      	bhi.n	80002e4 <updateDisplay+0xe4>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <updateDisplay+0x110>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	e000      	b.n	80002e6 <updateDisplay+0xe6>
 80002e4:	2301      	movs	r3, #1
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <updateDisplay+0x110>)
 80002e8:	7013      	strb	r3, [r2, #0]
			LL_mDelay(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f002 fae2 	bl	80028b4 <LL_mDelay>
			resetAllDigits();
 80002f0:	f000 f9d6 	bl	80006a0 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	dd8c      	ble.n	800021a <updateDisplay+0x1a>
	}

}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bdb0      	pop	{r4, r5, r7, pc}
 800030a:	bf00      	nop
 800030c:	08002990 	.word	0x08002990
 8000310:	20000000 	.word	0x20000000
 8000314:	20000024 	.word	0x20000024

08000318 <shiftDisplayText>:

void shiftDisplayText(){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if(displayTextPos < (20-4-1) && direction == 0){
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <shiftDisplayText+0x94>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b0e      	cmp	r3, #14
 8000322:	d80a      	bhi.n	800033a <shiftDisplayText+0x22>
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <shiftDisplayText+0x98>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d106      	bne.n	800033a <shiftDisplayText+0x22>
		displayTextPos = displayTextPos+1;
 800032c:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <shiftDisplayText+0x94>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <shiftDisplayText+0x94>)
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	e032      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos >= (20-4-1) && direction == 0){
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <shiftDisplayText+0x94>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b0e      	cmp	r3, #14
 8000340:	d90d      	bls.n	800035e <shiftDisplayText+0x46>
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <shiftDisplayText+0x98>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <shiftDisplayText+0x46>
		direction = 1;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <shiftDisplayText+0x98>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos-1;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <shiftDisplayText+0x94>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	3b01      	subs	r3, #1
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <shiftDisplayText+0x94>)
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	e020      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos <= 0 && direction == 1){
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <shiftDisplayText+0x94>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10d      	bne.n	8000382 <shiftDisplayText+0x6a>
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <shiftDisplayText+0x98>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d109      	bne.n	8000382 <shiftDisplayText+0x6a>
		direction = 0;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <shiftDisplayText+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos+1;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <shiftDisplayText+0x94>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <shiftDisplayText+0x94>)
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e00e      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos > 0 && direction == 1){
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <shiftDisplayText+0x94>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00a      	beq.n	80003a0 <shiftDisplayText+0x88>
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <shiftDisplayText+0x98>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d106      	bne.n	80003a0 <shiftDisplayText+0x88>
		displayTextPos = displayTextPos-1;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <shiftDisplayText+0x94>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <shiftDisplayText+0x94>)
 800039c:	701a      	strb	r2, [r3, #0]
	}
}
 800039e:	e7ff      	b.n	80003a0 <shiftDisplayText+0x88>
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000024 	.word	0x20000024
 80003b0:	20000025 	.word	0x20000025

080003b4 <displayLetter>:

void displayLetter(char letter){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3b20      	subs	r3, #32
 80003c2:	2b59      	cmp	r3, #89	; 0x59
 80003c4:	f200 8136 	bhi.w	8000634 <displayLetter+0x280>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <displayLetter+0x1c>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080005f3 	.word	0x080005f3
 80003d4:	08000635 	.word	0x08000635
 80003d8:	08000635 	.word	0x08000635
 80003dc:	08000635 	.word	0x08000635
 80003e0:	08000635 	.word	0x08000635
 80003e4:	08000635 	.word	0x08000635
 80003e8:	08000635 	.word	0x08000635
 80003ec:	08000635 	.word	0x08000635
 80003f0:	08000635 	.word	0x08000635
 80003f4:	08000635 	.word	0x08000635
 80003f8:	08000635 	.word	0x08000635
 80003fc:	08000635 	.word	0x08000635
 8000400:	08000635 	.word	0x08000635
 8000404:	08000635 	.word	0x08000635
 8000408:	08000635 	.word	0x08000635
 800040c:	08000635 	.word	0x08000635
 8000410:	0800062f 	.word	0x0800062f
 8000414:	080005f9 	.word	0x080005f9
 8000418:	080005ff 	.word	0x080005ff
 800041c:	08000605 	.word	0x08000605
 8000420:	0800060b 	.word	0x0800060b
 8000424:	08000611 	.word	0x08000611
 8000428:	08000617 	.word	0x08000617
 800042c:	0800061d 	.word	0x0800061d
 8000430:	08000623 	.word	0x08000623
 8000434:	08000629 	.word	0x08000629
 8000438:	08000635 	.word	0x08000635
 800043c:	08000635 	.word	0x08000635
 8000440:	08000635 	.word	0x08000635
 8000444:	08000635 	.word	0x08000635
 8000448:	08000635 	.word	0x08000635
 800044c:	08000635 	.word	0x08000635
 8000450:	08000635 	.word	0x08000635
 8000454:	08000539 	.word	0x08000539
 8000458:	08000635 	.word	0x08000635
 800045c:	0800054b 	.word	0x0800054b
 8000460:	08000635 	.word	0x08000635
 8000464:	0800055d 	.word	0x0800055d
 8000468:	08000563 	.word	0x08000563
 800046c:	08000569 	.word	0x08000569
 8000470:	0800056f 	.word	0x0800056f
 8000474:	0800057b 	.word	0x0800057b
 8000478:	08000581 	.word	0x08000581
 800047c:	08000587 	.word	0x08000587
 8000480:	0800058d 	.word	0x0800058d
 8000484:	08000593 	.word	0x08000593
 8000488:	08000635 	.word	0x08000635
 800048c:	0800059f 	.word	0x0800059f
 8000490:	080005ab 	.word	0x080005ab
 8000494:	08000635 	.word	0x08000635
 8000498:	08000635 	.word	0x08000635
 800049c:	080005bd 	.word	0x080005bd
 80004a0:	08000635 	.word	0x08000635
 80004a4:	080005c9 	.word	0x080005c9
 80004a8:	080005d5 	.word	0x080005d5
 80004ac:	080005db 	.word	0x080005db
 80004b0:	080005e1 	.word	0x080005e1
 80004b4:	08000635 	.word	0x08000635
 80004b8:	080005ed 	.word	0x080005ed
 80004bc:	08000635 	.word	0x08000635
 80004c0:	08000635 	.word	0x08000635
 80004c4:	08000635 	.word	0x08000635
 80004c8:	08000635 	.word	0x08000635
 80004cc:	08000635 	.word	0x08000635
 80004d0:	08000635 	.word	0x08000635
 80004d4:	0800053f 	.word	0x0800053f
 80004d8:	08000545 	.word	0x08000545
 80004dc:	08000551 	.word	0x08000551
 80004e0:	08000557 	.word	0x08000557
 80004e4:	08000635 	.word	0x08000635
 80004e8:	08000635 	.word	0x08000635
 80004ec:	08000635 	.word	0x08000635
 80004f0:	08000575 	.word	0x08000575
 80004f4:	08000635 	.word	0x08000635
 80004f8:	08000635 	.word	0x08000635
 80004fc:	08000635 	.word	0x08000635
 8000500:	08000635 	.word	0x08000635
 8000504:	08000635 	.word	0x08000635
 8000508:	08000599 	.word	0x08000599
 800050c:	080005a5 	.word	0x080005a5
 8000510:	08000635 	.word	0x08000635
 8000514:	080005b1 	.word	0x080005b1
 8000518:	080005b7 	.word	0x080005b7
 800051c:	08000635 	.word	0x08000635
 8000520:	080005c3 	.word	0x080005c3
 8000524:	080005cf 	.word	0x080005cf
 8000528:	08000635 	.word	0x08000635
 800052c:	08000635 	.word	0x08000635
 8000530:	08000635 	.word	0x08000635
 8000534:	080005e7 	.word	0x080005e7
		case 'A':
			setA();
 8000538:	f000 f8d0 	bl	80006dc <setA>
			break;
 800053c:	e07d      	b.n	800063a <displayLetter+0x286>
		case 'a':
			seta();
 800053e:	f000 f8f7 	bl	8000730 <seta>
			break;
 8000542:	e07a      	b.n	800063a <displayLetter+0x286>
		case 'b':
			setb();
 8000544:	f000 f91e 	bl	8000784 <setb>
			break;
 8000548:	e077      	b.n	800063a <displayLetter+0x286>
		case 'C':
			setC();
 800054a:	f000 f945 	bl	80007d8 <setC>
			break;
 800054e:	e074      	b.n	800063a <displayLetter+0x286>
		case 'c':
			setc();
 8000550:	f000 f96c 	bl	800082c <setc>
			break;
 8000554:	e071      	b.n	800063a <displayLetter+0x286>
		case 'd':
			setd();
 8000556:	f000 f993 	bl	8000880 <setd>
			break;
 800055a:	e06e      	b.n	800063a <displayLetter+0x286>
		case 'E':
			setE();
 800055c:	f000 f9ba 	bl	80008d4 <setE>
			break;
 8000560:	e06b      	b.n	800063a <displayLetter+0x286>
		case 'F':
			setF();
 8000562:	f000 f9e1 	bl	8000928 <setF>
			break;
 8000566:	e068      	b.n	800063a <displayLetter+0x286>
		case 'G':
			setG();
 8000568:	f000 fa08 	bl	800097c <setG>
			break;
 800056c:	e065      	b.n	800063a <displayLetter+0x286>
		case 'H':
			setH();
 800056e:	f000 fa2f 	bl	80009d0 <setH>
			break;
 8000572:	e062      	b.n	800063a <displayLetter+0x286>
		case 'h':
			seth();
 8000574:	f000 fa56 	bl	8000a24 <seth>
			break;
 8000578:	e05f      	b.n	800063a <displayLetter+0x286>
		case 'I':
			setI();
 800057a:	f000 fa7d 	bl	8000a78 <setI>
			break;
 800057e:	e05c      	b.n	800063a <displayLetter+0x286>
		case 'J':
			setJ();
 8000580:	f000 faa4 	bl	8000acc <setJ>
			break;
 8000584:	e059      	b.n	800063a <displayLetter+0x286>
		case 'K':
			setK();
 8000586:	f000 fcc3 	bl	8000f10 <setK>
			break;
 800058a:	e056      	b.n	800063a <displayLetter+0x286>
		case 'L':
			setL();
 800058c:	f000 fac8 	bl	8000b20 <setL>
			break;
 8000590:	e053      	b.n	800063a <displayLetter+0x286>
		case 'M':
			setM();
 8000592:	f000 fce7 	bl	8000f64 <setM>
			break;
 8000596:	e050      	b.n	800063a <displayLetter+0x286>
		case 'n':
			setn();
 8000598:	f000 faec 	bl	8000b74 <setn>
			break;
 800059c:	e04d      	b.n	800063a <displayLetter+0x286>
		case 'O':
			setO();
 800059e:	f000 fb13 	bl	8000bc8 <setO>
			break;
 80005a2:	e04a      	b.n	800063a <displayLetter+0x286>
		case 'o':
			seto();
 80005a4:	f000 fb3a 	bl	8000c1c <seto>
			break;
 80005a8:	e047      	b.n	800063a <displayLetter+0x286>
		case 'P':
			setP();
 80005aa:	f000 fb61 	bl	8000c70 <setP>
			break;
 80005ae:	e044      	b.n	800063a <displayLetter+0x286>
		case 'q':
			setq();
 80005b0:	f000 fb88 	bl	8000cc4 <setq>
			break;
 80005b4:	e041      	b.n	800063a <displayLetter+0x286>
		case 'r':
			setr();
 80005b6:	f000 fbaf 	bl	8000d18 <setr>
			break;
 80005ba:	e03e      	b.n	800063a <displayLetter+0x286>
		case 'S':
			setS();
 80005bc:	f000 fbd6 	bl	8000d6c <setS>
			break;
 80005c0:	e03b      	b.n	800063a <displayLetter+0x286>
		case 't':
			sett();
 80005c2:	f000 fbfd 	bl	8000dc0 <sett>
			break;
 80005c6:	e038      	b.n	800063a <displayLetter+0x286>
		case 'U':
			setU();
 80005c8:	f000 fc24 	bl	8000e14 <setU>
			break;
 80005cc:	e035      	b.n	800063a <displayLetter+0x286>
		case 'u':
			setu();
 80005ce:	f000 fc4b 	bl	8000e68 <setu>
			break;
 80005d2:	e032      	b.n	800063a <displayLetter+0x286>
		case 'V':
			setV();
 80005d4:	f000 fcec 	bl	8000fb0 <setV>
			break;
 80005d8:	e02f      	b.n	800063a <displayLetter+0x286>
		case 'W':
			setW();
 80005da:	f000 fd13 	bl	8001004 <setW>
			break;
 80005de:	e02c      	b.n	800063a <displayLetter+0x286>
		case 'X':
			setX();
 80005e0:	f000 fd3a 	bl	8001058 <setX>
			break;
 80005e4:	e029      	b.n	800063a <displayLetter+0x286>
		case 'y':
			sety();
 80005e6:	f000 fc69 	bl	8000ebc <sety>
			break;
 80005ea:	e026      	b.n	800063a <displayLetter+0x286>
		case 'Z':
			setZ();
 80005ec:	f000 fd5e 	bl	80010ac <setZ>
			break;
 80005f0:	e023      	b.n	800063a <displayLetter+0x286>
		case ' ':
			resetAllSegments();
 80005f2:	f000 f827 	bl	8000644 <resetAllSegments>
			break;
 80005f6:	e020      	b.n	800063a <displayLetter+0x286>


		case '1':
			setOne();
 80005f8:	f000 fd82 	bl	8001100 <setOne>
			break;
 80005fc:	e01d      	b.n	800063a <displayLetter+0x286>
		case '2':
			setTwo();
 80005fe:	f000 fda9 	bl	8001154 <setTwo>
			break;
 8000602:	e01a      	b.n	800063a <displayLetter+0x286>
		case '3':
			setThree();
 8000604:	f000 fdd0 	bl	80011a8 <setThree>
			break;
 8000608:	e017      	b.n	800063a <displayLetter+0x286>
		case '4':
			setFour();
 800060a:	f000 fdf7 	bl	80011fc <setFour>
			break;
 800060e:	e014      	b.n	800063a <displayLetter+0x286>
		case '5':
			setFive();
 8000610:	f000 fe1e 	bl	8001250 <setFive>
			break;
 8000614:	e011      	b.n	800063a <displayLetter+0x286>
		case '6':
			setSix();
 8000616:	f000 fe45 	bl	80012a4 <setSix>
			break;
 800061a:	e00e      	b.n	800063a <displayLetter+0x286>
		case '7':
			setSeven();
 800061c:	f000 fe6c 	bl	80012f8 <setSeven>
			break;
 8000620:	e00b      	b.n	800063a <displayLetter+0x286>
		case '8':
			setEight();
 8000622:	f000 fe93 	bl	800134c <setEight>
			break;
 8000626:	e008      	b.n	800063a <displayLetter+0x286>
		case '9':
			setNine();
 8000628:	f000 feba 	bl	80013a0 <setNine>
			break;
 800062c:	e005      	b.n	800063a <displayLetter+0x286>
		case '0':
			setZero();
 800062e:	f000 fee1 	bl	80013f4 <setZero>
			break;
 8000632:	e002      	b.n	800063a <displayLetter+0x286>
		default:
			setDot();
 8000634:	f000 ff08 	bl	8001448 <setDot>
			break;
 8000638:	bf00      	nop
	}
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop

08000644 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000648:	2102      	movs	r1, #2
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f7ff fdbb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000652:	2101      	movs	r1, #1
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f7ff fdb6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f7ff fdb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000668:	2120      	movs	r1, #32
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <resetAllSegments+0x58>)
 800066c:	f7ff fdac 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f7ff fda6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800067c:	2108      	movs	r1, #8
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f7ff fda1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <resetAllSegments+0x58>)
 800068a:	f7ff fd9d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800068e:	2102      	movs	r1, #2
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <resetAllSegments+0x58>)
 8000692:	f7ff fd99 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	48000400 	.word	0x48000400

080006a0 <resetAllDigits>:

void resetAllDigits(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff fd9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80006ae:	2120      	movs	r1, #32
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f7ff fd96 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f7ff fd91 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f7ff fd8c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f7ff fd87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <setA>:

void setA(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80006e0:	2102      	movs	r1, #2
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f7ff fd7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80006ea:	2101      	movs	r1, #1
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f7ff fd78 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f7ff fd72 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f7ff fd6c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800070c:	2108      	movs	r1, #8
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f7ff fd67 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000716:	2110      	movs	r1, #16
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <setA+0x50>)
 800071a:	f7ff fd63 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800071e:	2120      	movs	r1, #32
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <setA+0x50>)
 8000722:	f7ff fd51 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	48000400 	.word	0x48000400

08000730 <seta>:
void seta(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000734:	2102      	movs	r1, #2
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f7ff fd53 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800073e:	2101      	movs	r1, #1
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f7ff fd4e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f7ff fd48 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000754:	2120      	movs	r1, #32
 8000756:	480a      	ldr	r0, [pc, #40]	; (8000780 <seta+0x50>)
 8000758:	f7ff fd44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f7ff fd3e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000768:	2110      	movs	r1, #16
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <seta+0x50>)
 800076c:	f7ff fd3a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000770:	2108      	movs	r1, #8
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f7ff fd27 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	48000400 	.word	0x48000400

08000784 <setb>:
void setb(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f7ff fd28 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000794:	2120      	movs	r1, #32
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <setb+0x50>)
 8000798:	f7ff fd24 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800079c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f7ff fd1e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007a8:	2108      	movs	r1, #8
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f7ff fd19 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80007b2:	2110      	movs	r1, #16
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <setb+0x50>)
 80007b6:	f7ff fd15 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80007ba:	2102      	movs	r1, #2
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f7ff fd02 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80007c4:	2101      	movs	r1, #1
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f7ff fcfd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	48000400 	.word	0x48000400

080007d8 <setC>:
void setC(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80007dc:	2102      	movs	r1, #2
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f7ff fcff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007e6:	2120      	movs	r1, #32
 80007e8:	480f      	ldr	r0, [pc, #60]	; (8000828 <setC+0x50>)
 80007ea:	f7ff fcfb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f7ff fcf5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007fa:	2108      	movs	r1, #8
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f7ff fcf0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000804:	2101      	movs	r1, #1
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f7ff fcdd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f7ff fcd7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800081a:	2110      	movs	r1, #16
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <setC+0x50>)
 800081e:	f7ff fcd3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48000400 	.word	0x48000400

0800082c <setc>:
void setc(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000830:	2120      	movs	r1, #32
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <setc+0x50>)
 8000834:	f7ff fcd6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f7ff fcd0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000844:	2110      	movs	r1, #16
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <setc+0x50>)
 8000848:	f7ff fccc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800084c:	2102      	movs	r1, #2
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f7ff fcb9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000856:	2101      	movs	r1, #1
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f7ff fcb4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f7ff fcae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800086c:	2108      	movs	r1, #8
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f7ff fca9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	48000400 	.word	0x48000400

08000880 <setd>:
void setd(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000884:	2101      	movs	r1, #1
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f7ff fcab 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f7ff fca5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800089a:	2120      	movs	r1, #32
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <setd+0x50>)
 800089e:	f7ff fca1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f7ff fc9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80008ae:	2110      	movs	r1, #16
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <setd+0x50>)
 80008b2:	f7ff fc97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80008b6:	2102      	movs	r1, #2
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f7ff fc84 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80008c0:	2108      	movs	r1, #8
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f7ff fc7f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400

080008d4 <setE>:
void setE(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008d8:	2102      	movs	r1, #2
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f7ff fc81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008e2:	2120      	movs	r1, #32
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <setE+0x50>)
 80008e6:	f7ff fc7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f7ff fc77 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80008f6:	2108      	movs	r1, #8
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f7ff fc72 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000900:	2110      	movs	r1, #16
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <setE+0x50>)
 8000904:	f7ff fc6e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000908:	2101      	movs	r1, #1
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f7ff fc5b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f7ff fc55 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	48000400 	.word	0x48000400

08000928 <setF>:
void setF(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800092c:	2102      	movs	r1, #2
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f7ff fc57 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f7ff fc51 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000942:	2108      	movs	r1, #8
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f7ff fc4c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800094c:	2110      	movs	r1, #16
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <setF+0x50>)
 8000950:	f7ff fc48 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000954:	2101      	movs	r1, #1
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f7ff fc35 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f7ff fc2f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800096a:	2120      	movs	r1, #32
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <setF+0x50>)
 800096e:	f7ff fc2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	48000400 	.word	0x48000400

0800097c <setG>:
void setG(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000980:	2102      	movs	r1, #2
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f7ff fc2d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f7ff fc27 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000996:	2120      	movs	r1, #32
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <setG+0x50>)
 800099a:	f7ff fc23 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800099e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f7ff fc1d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009aa:	2108      	movs	r1, #8
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f7ff fc18 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80009b4:	2101      	movs	r1, #1
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f7ff fc05 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80009be:	2110      	movs	r1, #16
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <setG+0x50>)
 80009c2:	f7ff fc01 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	48000400 	.word	0x48000400

080009d0 <setH>:
void setH(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80009d4:	2101      	movs	r1, #1
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f7ff fc03 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f7ff fbfd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f7ff fbf7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009f6:	2108      	movs	r1, #8
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f7ff fbf2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a00:	2110      	movs	r1, #16
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <setH+0x50>)
 8000a04:	f7ff fbee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a08:	2102      	movs	r1, #2
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f7ff fbdb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a12:	2120      	movs	r1, #32
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <setH+0x50>)
 8000a16:	f7ff fbd7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	48000400 	.word	0x48000400

08000a24 <seth>:
void seth(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f7ff fbd8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f7ff fbd2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a40:	2108      	movs	r1, #8
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f7ff fbcd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <seth+0x50>)
 8000a4e:	f7ff fbc9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a52:	2102      	movs	r1, #2
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f7ff fbb6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f7ff fbb1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a66:	2120      	movs	r1, #32
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <seth+0x50>)
 8000a6a:	f7ff fbad 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	48000400 	.word	0x48000400

08000a78 <setI>:
void setI(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f7ff fbae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a88:	2108      	movs	r1, #8
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f7ff fba9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a92:	2102      	movs	r1, #2
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f7ff fb96 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f7ff fb91 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f7ff fb8b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <setI+0x50>)
 8000ab6:	f7ff fb87 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000aba:	2110      	movs	r1, #16
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <setI+0x50>)
 8000abe:	f7ff fb83 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000400 	.word	0x48000400

08000acc <setJ>:
void setJ(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f7ff fb85 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f7ff fb7f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <setJ+0x50>)
 8000aea:	f7ff fb7b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f7ff fb75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000afa:	2102      	movs	r1, #2
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f7ff fb62 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000b04:	2108      	movs	r1, #8
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f7ff fb5d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <setJ+0x50>)
 8000b12:	f7ff fb59 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	48000400 	.word	0x48000400

08000b20 <setL>:
void setL(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b24:	2120      	movs	r1, #32
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <setL+0x50>)
 8000b28:	f7ff fb5c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f7ff fb56 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b38:	2108      	movs	r1, #8
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f7ff fb51 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b42:	2102      	movs	r1, #2
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f7ff fb3e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f7ff fb39 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f7ff fb33 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b62:	2110      	movs	r1, #16
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <setL+0x50>)
 8000b66:	f7ff fb2f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	48000400 	.word	0x48000400

08000b74 <setn>:
void setn(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f7ff fb30 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f7ff fb2a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b90:	2110      	movs	r1, #16
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <setn+0x50>)
 8000b94:	f7ff fb26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f7ff fb13 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f7ff fb0e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000bac:	2120      	movs	r1, #32
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <setn+0x50>)
 8000bb0:	f7ff fb0a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f7ff fb05 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <setO>:
void setO(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f7ff fb07 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f7ff fb02 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f7ff fafc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bec:	2120      	movs	r1, #32
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <setO+0x50>)
 8000bf0:	f7ff faf8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f7ff faf2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c00:	2108      	movs	r1, #8
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f7ff faed 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <setO+0x50>)
 8000c0e:	f7ff fadb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	48000400 	.word	0x48000400

08000c1c <seto>:
void seto(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f7ff fadc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <seto+0x50>)
 8000c30:	f7ff fad8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f7ff fad2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c40:	2110      	movs	r1, #16
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <seto+0x50>)
 8000c44:	f7ff face 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c48:	2102      	movs	r1, #2
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f7ff fabb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c52:	2101      	movs	r1, #1
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f7ff fab6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f7ff fab1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48000400 	.word	0x48000400

08000c70 <setP>:
void setP(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c74:	2102      	movs	r1, #2
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f7ff fab3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f7ff faae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f7ff faa8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c94:	2108      	movs	r1, #8
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f7ff faa3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <setP+0x50>)
 8000ca2:	f7ff fa9f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f7ff fa8b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <setP+0x50>)
 8000cb6:	f7ff fa87 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <setq>:
void setq(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000cc8:	2102      	movs	r1, #2
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f7ff fa89 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f7ff fa84 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce4:	f7ff fa7e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ce8:	2108      	movs	r1, #8
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f7ff fa79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <setq+0x50>)
 8000cf6:	f7ff fa75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <setq+0x50>)
 8000cfe:	f7ff fa63 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f7ff fa5d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <setr>:
void setr(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f7ff fa5e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d28:	2110      	movs	r1, #16
 8000d2a:	480f      	ldr	r0, [pc, #60]	; (8000d68 <setr+0x50>)
 8000d2c:	f7ff fa5a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000d30:	2102      	movs	r1, #2
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f7ff fa47 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f7ff fa42 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f7ff fa3c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d50:	2120      	movs	r1, #32
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <setr+0x50>)
 8000d54:	f7ff fa38 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f7ff fa33 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	48000400 	.word	0x48000400

08000d6c <setS>:
void setS(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d70:	2102      	movs	r1, #2
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f7ff fa35 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f7ff fa2f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d86:	2120      	movs	r1, #32
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <setS+0x50>)
 8000d8a:	f7ff fa2b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d8e:	2108      	movs	r1, #8
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff fa26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <setS+0x50>)
 8000d9c:	f7ff fa22 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000da0:	2101      	movs	r1, #1
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f7ff fa0f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f7ff fa09 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <sett>:
void sett(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4812      	ldr	r0, [pc, #72]	; (8000e10 <sett+0x50>)
 8000dc8:	f7ff fa0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f7ff fa06 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000dd8:	2108      	movs	r1, #8
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f7ff fa01 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000de2:	2110      	movs	r1, #16
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <sett+0x50>)
 8000de6:	f7ff f9fd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000dea:	2102      	movs	r1, #2
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f7ff f9ea 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000df4:	2101      	movs	r1, #1
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f7ff f9e5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e06:	f7ff f9df 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	48000400 	.word	0x48000400

08000e14 <setU>:
void setU(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f7ff f9e1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f7ff f9db 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e2e:	2120      	movs	r1, #32
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <setU+0x50>)
 8000e32:	f7ff f9d7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f7ff f9d1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e42:	2108      	movs	r1, #8
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f7ff f9cc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f7ff f9b9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e56:	2110      	movs	r1, #16
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <setU+0x50>)
 8000e5a:	f7ff f9b5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	48000400 	.word	0x48000400

08000e68 <setu>:
void setu(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f7ff f9b6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e78:	2120      	movs	r1, #32
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <setu+0x50>)
 8000e7c:	f7ff f9b2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f7ff f9ac 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f7ff f999 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e96:	2101      	movs	r1, #1
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f7ff f994 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f7ff f98f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <setu+0x50>)
 8000eae:	f7ff f98b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	48000400 	.word	0x48000400

08000ebc <sety>:
void sety(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f7ff f98d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f7ff f987 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <sety+0x50>)
 8000eda:	f7ff f983 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f7ff f97e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <sety+0x50>)
 8000eec:	f7ff f97a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f7ff f967 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f7ff f961 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	48000400 	.word	0x48000400

08000f10 <setK>:


// Disgusting letters :D
void setK(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f14:	2102      	movs	r1, #2
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f7ff f963 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f7ff f95d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f7ff f957 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f36:	2108      	movs	r1, #8
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f7ff f952 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000f40:	2110      	movs	r1, #16
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <setK+0x50>)
 8000f44:	f7ff f94e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f7ff f93b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000f52:	2120      	movs	r1, #32
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <setK+0x50>)
 8000f56:	f7ff f937 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	48000400 	.word	0x48000400

08000f64 <setM>:
void setM(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f68:	2102      	movs	r1, #2
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f7ff f939 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f72:	2101      	movs	r1, #1
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f7ff f934 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <setM+0x48>)
 8000f80:	f7ff f930 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f84:	2108      	movs	r1, #8
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f7ff f92b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f7ff f917 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f7ff f911 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	48000400 	.word	0x48000400

08000fb0 <setV>:
void setV(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f7ff f913 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <setV+0x50>)
 8000fc2:	f7ff f90f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f7ff f90a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f7ff f8f7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe2:	f7ff f8f1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f7ff f8eb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <setV+0x50>)
 8000ff6:	f7ff f8e7 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	48000400 	.word	0x48000400

08001004 <setW>:
void setW(void){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001008:	2101      	movs	r1, #1
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f7ff f8e9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f7ff f8e3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800101e:	2120      	movs	r1, #32
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <setW+0x50>)
 8001022:	f7ff f8df 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f7ff f8d9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001032:	2108      	movs	r1, #8
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f7ff f8d4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800103c:	2110      	movs	r1, #16
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <setW+0x50>)
 8001040:	f7ff f8d0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001044:	2102      	movs	r1, #2
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f7ff f8bd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	48000400 	.word	0x48000400

08001058 <setX>:
void setX(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800105c:	2102      	movs	r1, #2
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f7ff f8bf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001066:	2120      	movs	r1, #32
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <setX+0x50>)
 800106a:	f7ff f8bb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800106e:	2110      	movs	r1, #16
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <setX+0x50>)
 8001072:	f7ff f8b7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001076:	2101      	movs	r1, #1
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f7ff f8a4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f7ff f89e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f7ff f898 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001098:	2108      	movs	r1, #8
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f7ff f893 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <setZ>:
void setZ(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010b0:	2102      	movs	r1, #2
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f7ff f895 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010ba:	2101      	movs	r1, #1
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f7ff f890 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80010c4:	2120      	movs	r1, #32
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <setZ+0x50>)
 80010c8:	f7ff f88c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f7ff f886 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010d8:	2110      	movs	r1, #16
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <setZ+0x50>)
 80010dc:	f7ff f882 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f7ff f86e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010ec:	2108      	movs	r1, #8
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f7ff f869 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	48000400 	.word	0x48000400

08001100 <setOne>:

// numbers
void setOne(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001104:	2101      	movs	r1, #1
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f7ff f86b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f7ff f865 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800111a:	2102      	movs	r1, #2
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f7ff f852 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001124:	2120      	movs	r1, #32
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <setOne+0x50>)
 8001128:	f7ff f84e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800112c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f7ff f848 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001138:	2108      	movs	r1, #8
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f7ff f843 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001142:	2110      	movs	r1, #16
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <setOne+0x50>)
 8001146:	f7ff f83f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	48000400 	.word	0x48000400

08001154 <setTwo>:
void setTwo(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001158:	2102      	movs	r1, #2
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f7ff f841 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001162:	2101      	movs	r1, #1
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f7ff f83c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800116c:	2120      	movs	r1, #32
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <setTwo+0x50>)
 8001170:	f7ff f838 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f7ff f832 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001180:	2110      	movs	r1, #16
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <setTwo+0x50>)
 8001184:	f7ff f82e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f7ff f81a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001194:	2108      	movs	r1, #8
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f7ff f815 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	48000400 	.word	0x48000400

080011a8 <setThree>:
void setThree(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011ac:	2102      	movs	r1, #2
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f7ff f817 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80011b6:	2101      	movs	r1, #1
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff f812 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f7ff f80c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011cc:	2120      	movs	r1, #32
 80011ce:	480a      	ldr	r0, [pc, #40]	; (80011f8 <setThree+0x50>)
 80011d0:	f7ff f808 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011d4:	2110      	movs	r1, #16
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <setThree+0x50>)
 80011d8:	f7ff f804 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f7fe fff0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011e8:	2108      	movs	r1, #8
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f7fe ffeb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	48000400 	.word	0x48000400

080011fc <setFour>:
void setFour(void){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001200:	2101      	movs	r1, #1
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f7fe ffed 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800120a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f7fe ffe7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001216:	2108      	movs	r1, #8
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f7fe ffe2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001220:	2110      	movs	r1, #16
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <setFour+0x50>)
 8001224:	f7fe ffde 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001228:	2102      	movs	r1, #2
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f7fe ffcb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001232:	2120      	movs	r1, #32
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <setFour+0x50>)
 8001236:	f7fe ffc7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f7fe ffc1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	48000400 	.word	0x48000400

08001250 <setFive>:
void setFive(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001254:	2102      	movs	r1, #2
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f7fe ffc3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f7fe ffbd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800126a:	2120      	movs	r1, #32
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <setFive+0x50>)
 800126e:	f7fe ffb9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001272:	2108      	movs	r1, #8
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f7fe ffb4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800127c:	2110      	movs	r1, #16
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <setFive+0x50>)
 8001280:	f7fe ffb0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001284:	2101      	movs	r1, #1
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f7fe ff9d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800128e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f7fe ff97 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	48000400 	.word	0x48000400

080012a4 <setSix>:
void setSix(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012a8:	2102      	movs	r1, #2
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f7fe ff99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f7fe ff93 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012be:	2120      	movs	r1, #32
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <setSix+0x50>)
 80012c2:	f7fe ff8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f7fe ff89 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80012d2:	2108      	movs	r1, #8
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f7fe ff84 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80012dc:	2110      	movs	r1, #16
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <setSix+0x50>)
 80012e0:	f7fe ff80 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012e4:	2101      	movs	r1, #1
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f7fe ff6d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000400 	.word	0x48000400

080012f8 <setSeven>:
void setSeven(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012fc:	2102      	movs	r1, #2
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f7fe ff6f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001306:	2101      	movs	r1, #1
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f7fe ff6a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f7fe ff64 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800131c:	2120      	movs	r1, #32
 800131e:	480a      	ldr	r0, [pc, #40]	; (8001348 <setSeven+0x50>)
 8001320:	f7fe ff52 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f7fe ff4c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001330:	2108      	movs	r1, #8
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f7fe ff47 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800133a:	2110      	movs	r1, #16
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <setSeven+0x50>)
 800133e:	f7fe ff43 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	48000400 	.word	0x48000400

0800134c <setEight>:
void setEight(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001350:	2102      	movs	r1, #2
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7fe ff45 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800135a:	2101      	movs	r1, #1
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f7fe ff40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f7fe ff3a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001370:	2120      	movs	r1, #32
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <setEight+0x50>)
 8001374:	f7fe ff36 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f7fe ff30 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001384:	2108      	movs	r1, #8
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f7fe ff2b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800138e:	2110      	movs	r1, #16
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <setEight+0x50>)
 8001392:	f7fe ff27 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	48000400 	.word	0x48000400

080013a0 <setNine>:
void setNine(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013a4:	2102      	movs	r1, #2
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7fe ff1b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013ae:	2101      	movs	r1, #1
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f7fe ff16 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f7fe ff10 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013c4:	2120      	movs	r1, #32
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <setNine+0x50>)
 80013c8:	f7fe ff0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013cc:	2108      	movs	r1, #8
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f7fe ff07 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80013d6:	2110      	movs	r1, #16
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <setNine+0x50>)
 80013da:	f7fe ff03 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f7fe feef 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	48000400 	.word	0x48000400

080013f4 <setZero>:
void setZero(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013f8:	2102      	movs	r1, #2
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f7fe fef1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001402:	2101      	movs	r1, #1
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f7fe feec 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f7fe fee6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001418:	2120      	movs	r1, #32
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <setZero+0x50>)
 800141c:	f7fe fee2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f7fe fedc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800142c:	2108      	movs	r1, #8
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f7fe fed7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001436:	2110      	movs	r1, #16
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <setZero+0x50>)
 800143a:	f7fe fec5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	48000400 	.word	0x48000400

08001448 <setDot>:

// and dot to end
void setDot(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 800144c:	2102      	movs	r1, #2
 800144e:	4802      	ldr	r0, [pc, #8]	; (8001458 <setDot+0x10>)
 8001450:	f7fe fec8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	48000400 	.word	0x48000400

0800145c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <LL_GPIO_ResetOutputPin>:
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80014be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014c2:	f7ff ffcb 	bl	800145c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014ca:	f7ff ffc7 	bl	800145c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80014ce:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f7ff ffd9 	bl	800148c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 80014da:	2132      	movs	r1, #50	; 0x32
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_GPIO_Init+0x84>)
 80014de:	f7ff ffd5 	bl	800148c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80014e2:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80014e6:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014e8:	2301      	movs	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f000 fd46 	bl	8001f90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001504:	2332      	movs	r3, #50	; 0x32
 8001506:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_GPIO_Init+0x84>)
 800151e:	f000 fd37 	bl	8001f90 <LL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000400 	.word	0x48000400

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <LL_RCC_HSI_Enable+0x1c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <LL_RCC_HSI_Enable+0x1c>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <LL_RCC_HSI_IsReady+0x20>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <LL_RCC_SetSysClkSource+0x24>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 0203 	bic.w	r2, r3, #3
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <LL_RCC_SetSysClkSource+0x24>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <LL_RCC_GetSysClkSource+0x18>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <LL_RCC_SetAHBPrescaler+0x24>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <LL_RCC_SetAHBPrescaler+0x24>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <LL_RCC_SetAPB1Prescaler+0x24>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000

08001704 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <LL_FLASH_SetLatency+0x24>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 0207 	bic.w	r2, r3, #7
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <LL_FLASH_SetLatency+0x24>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40022000 	.word	0x40022000

0800172c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <LL_FLASH_GetLatency+0x18>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000

08001748 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff ffa1 	bl	80016d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001792:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001796:	f7ff ff85 	bl	80016a4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
 800179c:	f7ff fec8 	bl	8001530 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f81a 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f7ff fe80 	bl	80014a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017a8:	f000 fa06 	bl	8001bb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ac:	f000 fa66 	bl	8001c7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 80017b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017b4:	f7ff ffd8 	bl	8001768 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 80017b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017bc:	f7ff ffc4 	bl	8001748 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_CC2(TIM3);
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <main+0x4c>)
 80017c2:	f7ff ffd1 	bl	8001768 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM3);
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <main+0x4c>)
 80017c8:	f7ff ffbe 	bl	8001748 <LL_TIM_EnableCounter>

  resetAllDigits();
 80017cc:	f7fe ff68 	bl	80006a0 <resetAllDigits>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <main+0x48>
 80017d2:	bf00      	nop
 80017d4:	40000400 	.word	0x40000400

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff ff91 	bl	8001704 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffa2 	bl	800172c <LL_FLASH_GetLatency>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1fa      	bne.n	80017e4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80017ee:	f7ff fec3 	bl	8001578 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017f2:	bf00      	nop
 80017f4:	f7ff fed0 	bl	8001598 <LL_RCC_HSI_IsReady>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d1fa      	bne.n	80017f4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80017fe:	2010      	movs	r0, #16
 8001800:	f7ff fedc 	bl	80015bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ff11 	bl	800162c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff ff22 	bl	8001654 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff ff33 	bl	800167c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fee6 	bl	80015e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800181c:	bf00      	nop
 800181e:	f7ff fef7 	bl	8001610 <LL_RCC_GetSysClkSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1fa      	bne.n	800181e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <SystemClock_Config+0x60>)
 800182a:	f001 f835 	bl	8002898 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800182e:	4802      	ldr	r0, [pc, #8]	; (8001838 <SystemClock_Config+0x60>)
 8001830:	f001 f866 	bl	8002900 <LL_SetSystemCoreClock>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	007a1200 	.word	0x007a1200

0800183c <LL_TIM_ClearFlag_UPDATE>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f06f 0201 	mvn.w	r2, #1
 800184a:	611a      	str	r2, [r3, #16]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <HardFault_Handler+0x4>

0800188a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <BusFault_Handler+0x4>

08001896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <UsageFault_Handler+0x4>

0800189c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80018d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018dc:	f7ff ffbc 	bl	8001858 <LL_TIM_IsActiveFlag_UPDATE>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <TIM2_IRQHandler+0x16>
		shiftDisplayText();
 80018e6:	f7fe fd17 	bl	8000318 <shiftDisplayText>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80018ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ee:	f7ff ffa5 	bl	800183c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <TIM3_IRQHandler+0x20>)
 80018fe:	f7ff ffab 	bl	8001858 <LL_TIM_IsActiveFlag_UPDATE>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <TIM3_IRQHandler+0x14>
		updateDisplay();
 8001908:	f7fe fc7a 	bl	8000200 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM3_IRQHandler+0x20>)
 800190e:	f7ff ff95 	bl	800183c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40000400 	.word	0x40000400

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_APB1_GRP1_EnableClock>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000

08001a84 <LL_TIM_DisableARRPreload>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_TIM_OC_DisableFast>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d028      	beq.n	8001b06 <LL_TIM_OC_DisableFast+0x62>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d023      	beq.n	8001b02 <LL_TIM_OC_DisableFast+0x5e>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d01e      	beq.n	8001afe <LL_TIM_OC_DisableFast+0x5a>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d019      	beq.n	8001afa <LL_TIM_OC_DisableFast+0x56>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001acc:	d013      	beq.n	8001af6 <LL_TIM_OC_DisableFast+0x52>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad4:	d00d      	beq.n	8001af2 <LL_TIM_OC_DisableFast+0x4e>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001adc:	d007      	beq.n	8001aee <LL_TIM_OC_DisableFast+0x4a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d101      	bne.n	8001aea <LL_TIM_OC_DisableFast+0x46>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e00e      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001aea:	2308      	movs	r3, #8
 8001aec:	e00c      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e00a      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e008      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e006      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e004      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_TIM_OC_DisableFast+0x64>
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LL_TIM_OC_DisableFast+0x9c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	440b      	add	r3, r1
 8001b18:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	4908      	ldr	r1, [pc, #32]	; (8001b44 <LL_TIM_OC_DisableFast+0xa0>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	4619      	mov	r1, r3
 8001b26:	2304      	movs	r3, #4
 8001b28:	408b      	lsls	r3, r1
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	080029a4 	.word	0x080029a4
 8001b44:	080029b0 	.word	0x080029b0

08001b48 <LL_TIM_SetClockSource>:
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_TIM_SetTriggerOutput>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_TIM_DisableMasterSlaveMode>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fec7 	bl	8002968 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff ff3a 	bl	8001a54 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001be0:	f7ff feae 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fefe 	bl	80019ec <NVIC_EncodePriority>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	201c      	movs	r0, #28
 8001bf6:	f7ff fecf 	bl	8001998 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001bfa:	201c      	movs	r0, #28
 8001bfc:	f7ff feae 	bl	800195c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001c00:	f240 331f 	movw	r3, #799	; 0x31f
 8001c04:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 8001c0a:	f241 3387 	movw	r3, #4999	; 0x1387
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c1e:	f000 fab7 	bl	8002190 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001c22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c26:	f7ff ff2d 	bl	8001a84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c30:	f7ff ff8a 	bl	8001b48 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c52:	f000 fb0f 	bl	8002274 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001c56:	2101      	movs	r1, #1
 8001c58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c5c:	f7ff ff22 	bl	8001aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001c60:	2100      	movs	r1, #0
 8001c62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c66:	f7ff ff84 	bl	8001b72 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001c6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c6e:	f7ff ff93 	bl	8001b98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3738      	adds	r7, #56	; 0x38
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	; 0x38
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2220      	movs	r2, #32
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fe65 	bl	8002968 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff fed8 	bl	8001a54 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ca4:	f7ff fe4c 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe9c 	bl	80019ec <NVIC_EncodePriority>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	201d      	movs	r0, #29
 8001cba:	f7ff fe6d 	bl	8001998 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001cbe:	201d      	movs	r0, #29
 8001cc0:	f7ff fe4c 	bl	800195c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001cc4:	f240 331f 	movw	r3, #799	; 0x31f
 8001cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8001cce:	2331      	movs	r3, #49	; 0x31
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001cde:	f000 fa57 	bl	8002190 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001ce2:	4813      	ldr	r0, [pc, #76]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001ce4:	f7ff fece 	bl	8001a84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4811      	ldr	r0, [pc, #68]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001cec:	f7ff ff2c 	bl	8001b48 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	461a      	mov	r2, r3
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001d0c:	f000 fab2 	bl	8002274 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001d10:	2101      	movs	r1, #1
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001d14:	f7ff fec6 	bl	8001aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001d1c:	f7ff ff29 	bl	8001b72 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001d20:	4803      	ldr	r0, [pc, #12]	; (8001d30 <MX_TIM3_Init+0xb4>)
 8001d22:	f7ff ff39 	bl	8001b98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3738      	adds	r7, #56	; 0x38
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40000400 	.word	0x40000400

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d5e:	f7ff fddd 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f000 fddd 	bl	8002920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff fd0f 	bl	8001788 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001d78:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8001d7c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001d80:	20000028 	.word	0x20000028

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>

08001d86 <LL_GPIO_SetPinMode>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	b089      	sub	sp, #36	; 0x24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2103      	movs	r1, #3
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_GPIO_SetPinOutputType>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_GPIO_SetPinSpeed>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	613b      	str	r3, [r7, #16]
  return result;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	609a      	str	r2, [r3, #8]
}
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_GPIO_SetPinPull>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b089      	sub	sp, #36	; 0x24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	613b      	str	r3, [r7, #16]
  return result;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2103      	movs	r1, #3
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	61bb      	str	r3, [r7, #24]
  return result;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_GPIO_SetAFPin_0_7>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	613b      	str	r3, [r7, #16]
  return result;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	621a      	str	r2, [r3, #32]
}
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_GPIO_SetAFPin_8_15>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b089      	sub	sp, #36	; 0x24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	613b      	str	r3, [r7, #16]
  return result;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	210f      	movs	r1, #15
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	61bb      	str	r3, [r7, #24]
  return result;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f84:	bf00      	nop
 8001f86:	3724      	adds	r7, #36	; 0x24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	613b      	str	r3, [r7, #16]
  return result;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001fb2:	e051      	b.n	8002058 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d043      	beq.n	8002052 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <LL_GPIO_Init+0x4a>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d10e      	bne.n	8001ff8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff16 	bl	8001e14 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fef6 	bl	8001de4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff36 	bl	8001e72 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d11a      	bne.n	8002044 <LL_GPIO_Init+0xb4>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	60bb      	str	r3, [r7, #8]
  return result;
 800201a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b07      	cmp	r3, #7
 8002024:	d807      	bhi.n	8002036 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	461a      	mov	r2, r3
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff4e 	bl	8001ed0 <LL_GPIO_SetAFPin_0_7>
 8002034:	e006      	b.n	8002044 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	461a      	mov	r2, r3
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff75 	bl	8001f2e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	461a      	mov	r2, r3
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fe9a 	bl	8001d86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1a6      	bne.n	8001fb4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <LL_TIM_SetPrescaler>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_TIM_SetAutoReload>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_TIM_SetRepetitionCounter>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_TIM_OC_SetCompareCH1>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_TIM_OC_SetCompareCH2>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_TIM_OC_SetCompareCH3>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_TIM_OC_SetCompareCH4>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_TIM_OC_SetCompareCH5>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_TIM_OC_SetCompareCH6>:
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	615a      	str	r2, [r3, #20]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <LL_TIM_Init+0xd0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <LL_TIM_Init+0x28>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d003      	beq.n	80021b8 <LL_TIM_Init+0x28>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a2c      	ldr	r2, [pc, #176]	; (8002264 <LL_TIM_Init+0xd4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d106      	bne.n	80021c6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <LL_TIM_Init+0xd0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <LL_TIM_Init+0x66>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d4:	d00f      	beq.n	80021f6 <LL_TIM_Init+0x66>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <LL_TIM_Init+0xd4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <LL_TIM_Init+0x66>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <LL_TIM_Init+0xd8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <LL_TIM_Init+0x66>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <LL_TIM_Init+0xdc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <LL_TIM_Init+0x66>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <LL_TIM_Init+0xe0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d106      	bne.n	8002204 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff3b 	bl	800208c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff27 	bl	8002070 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <LL_TIM_Init+0xd0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <LL_TIM_Init+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LL_TIM_Init+0xd8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <LL_TIM_Init+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <LL_TIM_Init+0xdc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <LL_TIM_Init+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <LL_TIM_Init+0xe0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d105      	bne.n	800224e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff2d 	bl	80020a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff8e 	bl	8002170 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40000400 	.word	0x40000400
 8002268:	40014000 	.word	0x40014000
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800

08002274 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228a:	d045      	beq.n	8002318 <LL_TIM_OC_Init+0xa4>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002292:	d848      	bhi.n	8002326 <LL_TIM_OC_Init+0xb2>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d036      	beq.n	800230a <LL_TIM_OC_Init+0x96>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d840      	bhi.n	8002326 <LL_TIM_OC_Init+0xb2>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	d027      	beq.n	80022fc <LL_TIM_OC_Init+0x88>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	d838      	bhi.n	8002326 <LL_TIM_OC_Init+0xb2>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	d018      	beq.n	80022ee <LL_TIM_OC_Init+0x7a>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d830      	bhi.n	8002326 <LL_TIM_OC_Init+0xb2>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d003      	beq.n	80022d2 <LL_TIM_OC_Init+0x5e>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d007      	beq.n	80022e0 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80022d0:	e029      	b.n	8002326 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f82d 	bl	8002334 <OC1Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]
      break;
 80022de:	e023      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f8a0 	bl	8002428 <OC2Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]
      break;
 80022ec:	e01c      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f917 	bl	8002524 <OC3Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	75fb      	strb	r3, [r7, #23]
      break;
 80022fa:	e015      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f98e 	bl	8002620 <OC4Config>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]
      break;
 8002308:	e00e      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f9ed 	bl	80026ec <OC5Config>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
      break;
 8002316:	e007      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fa44 	bl	80027a8 <OC6Config>
 8002320:	4603      	mov	r3, r0
 8002322:	75fb      	strb	r3, [r7, #23]
      break;
 8002324:	e000      	b.n	8002328 <LL_TIM_OC_Init+0xb4>
      break;
 8002326:	bf00      	nop
  }

  return result;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0201 	bic.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f023 0202 	bic.w	r2, r3, #2
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0201 	bic.w	r2, r3, #1
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <OC1Config+0xe4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <OC1Config+0x7e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <OC1Config+0xe8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <OC1Config+0x7e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <OC1Config+0xec>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <OC1Config+0x7e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <OC1Config+0xf0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d11e      	bne.n	80023f0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f023 0208 	bic.w	r2, r3, #8
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f023 0204 	bic.w	r2, r3, #4
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe5e 	bl	80020c4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800

08002428 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	0212      	lsls	r2, r2, #8
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0220 	bic.w	r2, r3, #32
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0210 	bic.w	r2, r3, #16
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <OC2Config+0xec>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00b      	beq.n	80024ac <OC2Config+0x84>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <OC2Config+0xf0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <OC2Config+0x84>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <OC2Config+0xf4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <OC2Config+0x84>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <OC2Config+0xf8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d11f      	bne.n	80024ec <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	019b      	lsls	r3, r3, #6
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	019b      	lsls	r3, r3, #6
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fdee 	bl	80020e0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800

08002524 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a21      	ldr	r2, [pc, #132]	; (8002610 <OC3Config+0xec>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <OC3Config+0x82>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a20      	ldr	r2, [pc, #128]	; (8002614 <OC3Config+0xf0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <OC3Config+0x82>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <OC3Config+0xf4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <OC3Config+0x82>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <OC3Config+0xf8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d11f      	bne.n	80025e6 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	029b      	lsls	r3, r3, #10
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	015b      	lsls	r3, r3, #5
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff fd7f 	bl	80020fc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40014000 	.word	0x40014000
 8002618:	40014400 	.word	0x40014400
 800261c:	40014800 	.word	0x40014800

08002620 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	0212      	lsls	r2, r2, #8
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	031b      	lsls	r3, r3, #12
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <OC4Config+0xbc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <OC4Config+0x84>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <OC4Config+0xc0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <OC4Config+0x84>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <OC4Config+0xc4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <OC4Config+0x84>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <OC4Config+0xc8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d107      	bne.n	80026b4 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	019b      	lsls	r3, r3, #6
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fd26 	bl	8002118 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800

080026ec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a15      	ldr	r2, [pc, #84]	; (8002798 <OC5Config+0xac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00b      	beq.n	8002760 <OC5Config+0x74>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <OC5Config+0xb0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <OC5Config+0x74>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <OC5Config+0xb4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <OC5Config+0x74>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <OC5Config+0xb8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d109      	bne.n	8002774 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fcd7 	bl	8002134 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800

080027a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	0212      	lsls	r2, r2, #8
 80027da:	4313      	orrs	r3, r2
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	051b      	lsls	r3, r3, #20
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <OC6Config+0xac>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00b      	beq.n	800281e <OC6Config+0x76>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <OC6Config+0xb0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <OC6Config+0x76>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <OC6Config+0xb4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <OC6Config+0x76>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <OC6Config+0xb8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d109      	bne.n	8002832 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fc88 	bl	8002154 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40014000 	.word	0x40014000
 800285c:	40014400 	.word	0x40014400
 8002860:	40014800 	.word	0x40014800

08002864 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <LL_InitTick+0x30>)
 8002878:	3b01      	subs	r3, #1
 800287a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <LL_InitTick+0x30>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <LL_InitTick+0x30>)
 8002884:	2205      	movs	r2, #5
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e010 	.word	0xe000e010

08002898 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ffdd 	bl	8002864 <LL_InitTick>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <LL_mDelay+0x48>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80028c2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d00c      	beq.n	80028e6 <LL_mDelay+0x32>
  {
    Delay++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3301      	adds	r3, #1
 80028d0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80028d2:	e008      	b.n	80028e6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <LL_mDelay+0x48>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <LL_mDelay+0x32>
    {
      Delay--;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f3      	bne.n	80028d4 <LL_mDelay+0x20>
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <LL_SetSystemCoreClock+0x1c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000004 	.word	0x20000004

08002920 <__libc_init_array>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4d0d      	ldr	r5, [pc, #52]	; (8002958 <__libc_init_array+0x38>)
 8002924:	4c0d      	ldr	r4, [pc, #52]	; (800295c <__libc_init_array+0x3c>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	2600      	movs	r6, #0
 800292c:	42a6      	cmp	r6, r4
 800292e:	d109      	bne.n	8002944 <__libc_init_array+0x24>
 8002930:	4d0b      	ldr	r5, [pc, #44]	; (8002960 <__libc_init_array+0x40>)
 8002932:	4c0c      	ldr	r4, [pc, #48]	; (8002964 <__libc_init_array+0x44>)
 8002934:	f000 f820 	bl	8002978 <_init>
 8002938:	1b64      	subs	r4, r4, r5
 800293a:	10a4      	asrs	r4, r4, #2
 800293c:	2600      	movs	r6, #0
 800293e:	42a6      	cmp	r6, r4
 8002940:	d105      	bne.n	800294e <__libc_init_array+0x2e>
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	f855 3b04 	ldr.w	r3, [r5], #4
 8002948:	4798      	blx	r3
 800294a:	3601      	adds	r6, #1
 800294c:	e7ee      	b.n	800292c <__libc_init_array+0xc>
 800294e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002952:	4798      	blx	r3
 8002954:	3601      	adds	r6, #1
 8002956:	e7f2      	b.n	800293e <__libc_init_array+0x1e>
 8002958:	080029bc 	.word	0x080029bc
 800295c:	080029bc 	.word	0x080029bc
 8002960:	080029bc 	.word	0x080029bc
 8002964:	080029c0 	.word	0x080029c0

08002968 <memset>:
 8002968:	4402      	add	r2, r0
 800296a:	4603      	mov	r3, r0
 800296c:	4293      	cmp	r3, r2
 800296e:	d100      	bne.n	8002972 <memset+0xa>
 8002970:	4770      	bx	lr
 8002972:	f803 1b01 	strb.w	r1, [r3], #1
 8002976:	e7f9      	b.n	800296c <memset+0x4>

08002978 <_init>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr

08002984 <_fini>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr
